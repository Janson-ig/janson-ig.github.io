<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Janson&#39;s Blog</title>
        <link>http://www.jansonblog.com/</link>
        <description>Recent content on Janson&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 03 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://www.jansonblog.com/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>KMP算法（字符串匹配算法）</title>
        <link>http://www.jansonblog.com/p/post1/</link>
        <pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/post1/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/post1/1.png" alt="Featured image of post KMP算法（字符串匹配算法）" /&gt;&lt;p&gt;KMP(Knuth-Morris-Pratt)算法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 字符串查找算法（简称为KMP算法）可在一个字符串S内查找一个词W的出现位置。一个词在不匹配时本身就包含足够的信息来确定下一个匹配可能的开始位置，此算法利用这一特性以避免重重复查找之前出现的字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 我对MKP的认识：其归属于DP问题，核心的思想在于对要查找的字符串进行处理——寻找最长的前缀。然后通过记忆化数组的方式，跳过不可能成功匹配的字符串位置，从下一个可能的位置进行搜索。利用要查找字符串的特性，利用其前缀和后缀的共同部分来简化搜索过程。&lt;/p&gt;
&lt;h2 id=&#34;算法原理&#34;&gt;算法原理：&lt;/h2&gt;
&lt;p&gt; 简单的暴力搜索无非就是从每个可能的index开始，与要查找的字符串进行比较。
 而KMP则会跳过已经匹配的部分，以维基百科的说明为例，简单概括过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;要查找的字符串W=&amp;ldquo;ABCDABD&amp;rdquo;，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;给定字符串S=&amp;ldquo;ABC ABCDAB ABCDABCDABDE&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为例说明查找过程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;S:&lt;!-- raw HTML omitted --&gt;ABC&lt;!-- raw HTML omitted --&gt; ABCDAB ABCDABCDABDE&lt;br&gt;
W:&lt;!-- raw HTML omitted --&gt;ABC&lt;!-- raw HTML omitted --&gt;DABD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;S[3]（=&amp;rsquo; &amp;rsquo;)与W[3]（=&amp;lsquo;D&amp;rsquo;）不匹配，所以跳过；从S[4]开始，与W[0]进行比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;S:ABC &lt;!-- raw HTML omitted --&gt;ABCDAB&lt;!-- raw HTML omitted --&gt; ABCDABCDABDE&lt;br&gt;
W:&lt;!-- raw HTML omitted --&gt;ABCDAB&lt;!-- raw HTML omitted --&gt;D&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;从S[4]开始比较，当位于S[10]（=&amp;rsquo; &amp;rsquo;）时，与W对应的字符不匹配；但是此时可以注意到，&amp;quot;&lt;!-- raw HTML omitted --&gt; AB&lt;!-- raw HTML omitted --&gt;&amp;ldquo;在“ABCD&lt;!-- raw HTML omitted --&gt;AB&lt;!-- raw HTML omitted --&gt;&amp;ldquo;的头尾处均有出现——这意味着，尾部的“AB”可以作为下一次比较的起点。&lt;/li&gt;
&lt;li&gt;所以下次从index = 8的位置：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;S:ABC ABCD&lt;!-- raw HTML omitted --&gt;A&lt;!-- raw HTML omitted --&gt;B ABCDABCDABDE&lt;br&gt;
W:ABCD&lt;!-- raw HTML omitted --&gt;A&lt;!-- raw HTML omitted --&gt;BD&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;即绿色的‘A’开始进行匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习资料如下:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/explore/learn/card/dynamic-programming/630/an-introduction-to-dynamic-programming/4035/&#34;  title=&#34;Explore - LeetCode&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Explore - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Spring学习之路（三）</title>
        <link>http://www.jansonblog.com/p/spring3/</link>
        <pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/spring3/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/spring3/1.jpg" alt="Featured image of post Spring学习之路（三）" /&gt;&lt;ul&gt;
&lt;li&gt;Spring实战第五版中使用的WebSecurityConfigurerAdapter已被弃用 （还没学过就被弃用了&amp;hellip;）&lt;/li&gt;
&lt;li&gt;第五章开始，使用最新的Spring实战第六版进行学习&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-security的密码编译器&#34;&gt;Spring Security的密码编译器&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;密码编译器&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;加密方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BCryptPasswordEncoder&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用 bcrypt 加强哈希加密&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NoOpPasswordEncoder&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不应用任何编码&lt;!-- raw HTML omitted --&gt;（对测试有用，不适合生产使用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Pbkdf2PasswordEncoder&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用 PBKDF2 加密&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SCryptPasswordEncoder&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用 scrypt 哈希加密&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;StandardPasswordEncoder&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;应用 SHA-256 哈希加密&lt;!-- raw HTML omitted --&gt;（被认为不够安全，已经被弃用）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt; 数据库中密码被加密；&lt;br&gt;
 用户在login输入的密码使用相同的算法进行编码，在数据库使用PasswordEncoder的matches()方法进行比较。&lt;/p&gt;
&lt;h2 id=&#34;userdetailsservice实现&#34;&gt;UserDetailsService实现：&lt;/h2&gt;
&lt;p&gt;Spring Security提供了几个开箱即用的UserDetailsService实现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于内存的用户存储&lt;/li&gt;
&lt;li&gt;基于JDBC的用户存储&lt;/li&gt;
&lt;li&gt;由LDAP支持的用户存储&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*loadUserByUsername()方法接受用户名并使用它查找UserDetails对象。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*如果找不到给定用户名的用户，则抛出UsernameNotFoundException异常。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public interface UserDetailsService {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;securing-web-requests&#34;&gt;Securing web requests&lt;/h2&gt;
&lt;p&gt; authorizeRequests()返回(ExpressionUrlAuthorizationConfigurer.ExpressionInterceptUrlRegistry)对象，允许指定URL路径和模式，以及路径对应的安全要求：&lt;br&gt;
 书中项目的代码实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *保证对于/design 和 /orders路径的请求只对认证的用户有效；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *其他路径对于所有的用户有效；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Bean
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return http
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    .authorizeRequests()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    .antMatchers(&amp;#34;/design&amp;#34;, &amp;#34;/orders&amp;#34;).hasRole(&amp;#34;USER&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    .antMatchers(&amp;#34;/&amp;#34;, &amp;#34;/**&amp;#34;).permitAll()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    .and()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    .build();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt; Spring web requests的配置方法，以及如何保护路径如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方法&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;access(String)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果给定的Spring Expression Language(SpEL)表达式求值为true，允许访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;anonymous()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;允许匿名用户访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;authenticated()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;允许通过验证的用户访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;denyAll()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无条件拒绝所有访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;fullyAuthenticated()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;允许通过完全身份验证的用户访问（不推荐）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasAnyAuthority(String&amp;hellip;)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户具有任何一个给定的权限，则允许访问（可代替hasAnyRole(String)方法）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasAnyRole(String…)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户具有任何给定的角色，则允许访问&lt;!-- raw HTML omitted --&gt; （自动加 ROLE_ 的前缀）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasAuthority(String)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户具有指定的权限，则允许访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasRole(String)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户具有指定的角色，则允许访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasIpAddress(String)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户具有指定的IP地址，则允许访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;not()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否定任何其他认证方法的效果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;permitAll()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无条件允许访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;rememberMe()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;允许通过 remember-me 进行身份验证的用户访问&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;这其中值得注意的事，hasRole()方法可以被hasAuthority()代替：hasRole()方法自动补足 &lt;strong&gt;ROLE_&lt;/strong&gt; 的前缀。&lt;/li&gt;
&lt;li&gt;设计上来看，一个是权限，一个是角色，角色是权限的集合体。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-security对于spel表达式的扩展&#34;&gt;Spring Security对于SpEL表达式的扩展&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Security expression&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;SpEL的计算结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;authentication&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用户的认证对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;denyAll&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;恒为false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasAnyAuthority(String&amp;hellip;authorities)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户被授予所有权限中的某一个，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasAnyRole(String&amp;hellip;roles)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户有给定的roles中的某一个，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasAnyAuthority(String authority)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户被授予指定的权限，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasPermission(Object target, Object permission)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户能以给定的权限访问指定的目标对象，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasRole(String role)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户有给定的role，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;hasIpAddress(String ipAddress)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果请求来自指定ip，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;isAnnoymous()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户是匿名的，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;isAuthenticated()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户已认证，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;isFullyAuthenticated()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户经过完全身份验证(没有使用remember-me进行身份验证)，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;isRememberMe()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;如果用户使用remeber-me进行身份验证，则为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;permitAll()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;恒为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;principal&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用户的主要对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;remember-me（记住我）认证，就是常见的记住我：下次登录时，使用cookie导致自动登录发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*所以上面一节中的方法，可以用access()方法+security表达式的方式来实现；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;*/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Bean
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return http
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        .authorizeRequests()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        .antMatchers(&amp;#34;/design&amp;#34;, &amp;#34;/orders&amp;#34;).access(&amp;#34;hasRole(&amp;#39;USER&amp;#39;)&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        .antMatchers(&amp;#34;/&amp;#34;, &amp;#34;/**&amp;#34;).access(&amp;#34;permitAll()&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    .and()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    .build();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>2022年10月20日</title>
        <link>http://www.jansonblog.com/p/202210/</link>
        <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/202210/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/202210/1.jpg" alt="Featured image of post 2022年10月20日" /&gt;&lt;h2 id=&#34;近况&#34;&gt;近况&lt;/h2&gt;
&lt;p&gt;  两个月没有更新博客，因为什么都没有做，把最近的一些事，漫无目的的记录下来。随缘配图，我把这篇作为最近内心的一片幽静之地，在混乱中整理思绪，毕竟这是我的博客，我不要管别人看起来如何。&lt;/p&gt;
&lt;h2 id=&#34;1力扣&#34;&gt;1.力扣&lt;/h2&gt;
&lt;p&gt; 力扣依旧在每日刷题，现在基本上看到题可以判断出是什么题型，但是最近对于做题仿佛失去了一些思考。明知道只做出来是不对的，但是还是懒得去思考。或许是因为研究过于不顺，导致自己每天没有余力去探索。&lt;br&gt;
 跟狗人和阿毛一起报名了力扣的一个什么比赛，六道题目，好像一个人四个小时。我和阿毛10分钟不到做完了1，2题，后面知道是dp但是没想出公式，加上那天后背的粉瘤爆炸，下午不得不赶在医院关门前去诊所，最后排名也就只能1000+的样子。&lt;br&gt;
 好消息在比赛赚了1k积分，终于能换力扣全家桶了。但是，只能等回国再换，而我又什么时候可以回国呢。心中虽然有了回国的计划，但是最近研究的种种不顺，可能只能放弃寒假回国的计划，毕竟学会发表顺利毕业才是现阶段最重要的事。&lt;/p&gt;
&lt;h2 id=&#34;2学习&#34;&gt;2.学习&lt;/h2&gt;
&lt;p&gt; LoRa网关真的很难搞，研究室没有人能帮，只能自己硬着头皮，顶着压力一点一点来。&lt;br&gt;
 今天抱着试试的态度跟一个台湾的公司联络了一下，居然一个小时就收到了回信，虽然很简短，但是给了看起来有用的文档。看了一眼文档，前路漫漫，比想象中的要困难。进度一拖再拖，没有进展。&lt;/p&gt;
&lt;h2 id=&#34;3掘金&#34;&gt;3.掘金&lt;/h2&gt;
&lt;p&gt; 最大的收获应该是认识了掘金的小伙伴。安安，小安，小鱼，鑫，master。一群五湖四海的人就因为一场游戏比赛聚到了一起。&lt;br&gt;
 其中印象最深，聊的最多的是安安。安安是莱州的老乡。安安看着外表搞笑坚强，但是自述有些抑郁。我呢？我应该并不抑郁，不过在日本留学这几年，我内心也是孤独的，我似乎能体会到她和阿毛当时考研时的孤独。她的经历我周围有很多人跟她相似，但是她是一个非常外向的人，内心痛苦会释放。&lt;/p&gt;
&lt;h2 id=&#34;4独白&#34;&gt;4.独白&lt;/h2&gt;
&lt;p&gt; 安安是一个让我有时候会羡慕的人，因为她知道自己喜欢什么。而我，像王小波说的那样，原文我并不记得了，大概意思是：20岁是最迷茫的年龄，因为一个人要决定自己以后做什么。&lt;br&gt;
 我又想做什么呢？自学了Java或许是出于一种喜爱，又或是承诺的履行？因为好像是舅舅跟我说可以学Java，但是我可能又是羡慕大一花旗那个保研清北的学长，因为在他口中Java是那么有趣。或许我确实对Java有自己的喜爱，才能在尝试过那么多语言后选择Java。&lt;br&gt;
 总之，想起来舅妈说的话：“现在的年轻人迷茫是因为可以选的路太多了，她们那个年代，没有那么多路，大家不知不觉进了一条路就坚持走到了最后”。我也尽量不去想自己的选择，做出了选择就不要后悔。&lt;br&gt;
 在我内心空虚的时候，都回去看王小波的文章，因为他的经历和三观符合我的内心。&lt;br&gt;
 牢骚就发到这，因为まなびLAぼ要打卡下班了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论遇到什么人，我都会一直看守着内心的那块净土，直到遇到你。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>2022年8月生活日记</title>
        <link>http://www.jansonblog.com/p/202208/</link>
        <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/202208/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/202208/title.jpg" alt="Featured image of post 2022年8月生活日记" /&gt;&lt;p&gt; 对于我们来说，八月的主旋律是悲伤，因为答辩在八月，八月是狂欢和离别的夏天&lt;/p&gt;
&lt;h2 id=&#34;毕业季给学长送行&#34;&gt;毕业季——给学长送行&lt;/h2&gt;
&lt;p&gt; 曲学长要去LINE福冈工作了，走之前前一夜只睡了2个两小时，看着那状态实在不放心，陪他坐车到了新大阪去换乘新干线（最后还是等错了站台，改了票…）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/2.jpg&#34;
	width=&#34;1172&#34;
	height=&#34;1333&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/2_hu6d5962dea60589d46564cb11579fddca_466148_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/2_hu6d5962dea60589d46564cb11579fddca_466148_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;祝好&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;211px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt; 我跟学长都很喜欢吃咖喱，但是学长基本不喝酒&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/15.jpg&#34;
	width=&#34;4032&#34;
	height=&#34;3024&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/15_hu4c1e72fbca7aa974326b632058a71e0f_8528298_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/15_hu4c1e72fbca7aa974326b632058a71e0f_8528298_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;在草津车站周围吃了咖喱&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202208/1.jpg&#34;
	width=&#34;2050&#34;
	height=&#34;1537&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/1_hu4e8706c674acb641e95442a5b23c1ba9_787404_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/1_hu4e8706c674acb641e95442a5b23c1ba9_787404_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;居酒屋的合照&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;flag！&lt;/h2&gt;
&lt;p&gt; 跟学长约定，我拿到offer或者回国之前一定会去福冈找他。&lt;br&gt;
 用了很久的头像，当时是随便找的，偶然发现这个照片居然是在福冈县的神社拍的，所以去福冈也是为了要在那里拍一张属于自己的照片。&lt;br&gt;
 &lt;strong&gt;努力！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/dream.jpg&#34;
	width=&#34;800&#34;
	height=&#34;534&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/dream_hud7af933920631c2de6eee3a28a51d8b2_103708_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/dream_hud7af933920631c2de6eee3a28a51d8b2_103708_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;宮地嶽神社-福津市&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202208/QQ.jpg&#34;
	width=&#34;639&#34;
	height=&#34;640&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/QQ_hu8110c67a075faade3ff42027311a6bec_80211_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/QQ_hu8110c67a075faade3ff42027311a6bec_80211_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;用了四五年的头像&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;99&#34;
		data-flex-basis=&#34;239px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;大阪万博纪念公园&#34;&gt;大阪万博纪念公园&lt;/h2&gt;
&lt;p&gt; 在送学长去大阪的路上临时决定要去大阪的表弟家玩几天，表弟刚考完大阪大学修士，也算是说走就走的旅行了。不过包里就只有一把伞和一包湿巾，特意买了一套衣服换洗…所以冲动是有代价的。&lt;br&gt;
 表弟考的很差，为了不让他伤心，那天尽力的陪他到处逛，看他不开心就鼓励他。毕竟没有什么事是能一遍成功的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/3.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/3_hu52b41dd759c481218f70a80532419fd7_128434_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/3_hu52b41dd759c481218f70a80532419fd7_128434_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;超大河豚&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202208/4.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/4_huf9249d39b332e09e4f7c5b235d04ee81_140229_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/4_huf9249d39b332e09e4f7c5b235d04ee81_140229_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;万博公园的摩天轮夜景&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;天王寺あべのハルカス&#34;&gt;天王寺——あべのハルカス&lt;/h2&gt;
&lt;p&gt; 天王寺的「あべのハルカス」是现在关西最高的ビル，入门券1500，里面甚至有餐厅可以烤肉。唯一缺点就是水太贵&lt;br&gt;
 以后有机会会再上来一次，物超所值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/14.jpg&#34;
	width=&#34;960&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/14_hu896dee8b54dce26150c0d83f05e6ad3e_208124_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/14_hu896dee8b54dce26150c0d83f05e6ad3e_208124_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;あべのハルカス&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202208/9.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/9_hu30d80dbe6413d617b812adb52fcaef0e_193099_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/9_hu30d80dbe6413d617b812adb52fcaef0e_193099_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;看到海就想家了&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt; 从下午四点半待到了晚上七点，就为了看日落和夜景，不过确实是值得的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/7.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/7_hu044202227184a6665aff1009a4bcdd95_358456_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/7_hu044202227184a6665aff1009a4bcdd95_358456_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;白天&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202208/8.jpg&#34;
	width=&#34;960&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/8_hu8564922671f131fd3726c1b710fafa79_276562_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/8_hu8564922671f131fd3726c1b710fafa79_276562_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;夜景&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt; 之前研究室日本人曾经跟我说过，大阪北部和南部差别很大，南边犯罪率高，治安很差&lt;br&gt;
 北边高楼耸立，南边除了几个大型公园，几乎没有高层建筑(照片可能拍的位置不太对）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/10.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/10_hue9b3f980b21643f09b454e27dcbc7deb_291237_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/10_hue9b3f980b21643f09b454e27dcbc7deb_291237_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;应该是大阪南部&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202208/11.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/11_hu7d8135c0d2898b6db83010b6d3a71006_202877_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/11_hu7d8135c0d2898b6db83010b6d3a71006_202877_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;这个应该是西边&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt; 非常经典的一幕，天王寺动物园车站北侧有一个看着很怪的会馆，应该是基督教会馆，但这外观看着像个邪教…&lt;br&gt;
 车站南侧更诡异，走过来的时候路上很吓人，照片都没好意思拍，也可能那边的人看着吓人吧。不过在动物园周围看到了很多涂鸦的垃圾箱和流浪汉…在日本有涂鸦的话，治安应该是很差的…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/5.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/5_hua5aedb20654606bd4588b2e9ebd92855_219515_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/5_hua5aedb20654606bd4588b2e9ebd92855_219515_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;奇怪的会馆&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小动物&#34;&gt;小动物&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/6.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/6_hu88e6477641d644520c100edd4b45b14d_222580_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/6_hu88e6477641d644520c100edd4b45b14d_222580_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;小家伙虽然可恨，但是也蛮可爱的&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202208/18.jpg&#34;
	width=&#34;4032&#34;
	height=&#34;3024&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/18_huc579e1b9170255e21042108364e25ca6_6037912_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/18_huc579e1b9170255e21042108364e25ca6_6037912_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;带眼妆的鱼&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;姬路城&#34;&gt;姬路城&lt;/h2&gt;
&lt;p&gt; 最后一天去了姬路城，路上有一段靠海，风景很不错&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/13.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/13_hu563f2a6947be22c822d14e540708a3c1_132136_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/13_hu563f2a6947be22c822d14e540708a3c1_132136_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;明石海峡大桥&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202208/17.jpg&#34;
	width=&#34;4032&#34;
	height=&#34;3024&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/17_hufd59a83dddcdc9c39f6fb9a6a501bb8f_7874076_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/17_hufd59a83dddcdc9c39f6fb9a6a501bb8f_7874076_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;最喜欢的一张照片&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt; 出发的晚，赶在入场截止一小时进了城，两个小时只把这两个城逛完了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202208/12.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202208/12_hu7de49d0906fc448953610fa938945f27_224922_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202208/12_hu7de49d0906fc448953610fa938945f27_224922_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;城里有六层，很壮观&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不愿清醒，宁愿一直沉迷放纵。不知归路，宁愿一世无悔追逐。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Spring学习之路（二）</title>
        <link>http://www.jansonblog.com/p/spring2/</link>
        <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/spring2/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/spring2/1.jpg" alt="Featured image of post Spring学习之路（二）" /&gt;&lt;h2 id=&#34;模板引擎&#34;&gt;模板引擎&lt;/h2&gt;
&lt;p&gt;书中总结了以下模板：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模板&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Spring Boot starter依赖&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;JavaServer Pages(JSP)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无(由Tomcat或Jetty提供)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeMarker&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-freemarker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Groovy Templates&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-groovy-templates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mustache&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-mustache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Thymeleaf&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-thymeleaf&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中，JSP不需要依赖的原因:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是因为Servlet容器本身（默认是Tomcat）会实现JSP，因此不需要额外的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用JSP问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java Servlet容器包括嵌入式的Tomcat和Jetty容器，通常会在“/WEB-INF”目录下寻找JSP。如果将应用构建成一个可执行的JAR文件，就无法满足这种需求；&lt;strong&gt;只有在将应用构建成WAR文件并部署到Servlet容器中时&lt;/strong&gt;，才能选择JSP方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模板缓存&#34;&gt;模板缓存&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，模板只有在&lt;strong&gt;第⼀次使用的时候解析⼀次&lt;/strong&gt;，解析的结果会被后续的请求所使⽤。开发期缓存存在时，想要看到变更效果，必须重新启动应用，非常不方便&lt;/li&gt;
&lt;li&gt;禁用模板缓存：将相关缓存属性设成false:在application.properties中添加：
&lt;code&gt;spring.thymeleaf.cache=false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模板&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;启用缓存的属性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeMarker&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.freemarker.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Groovy Templates&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.groovy.template.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mustache&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.mustache.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Thymeleaf&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.thymeleaf.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;thymeleaf模板&#34;&gt;Thymeleaf模板&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Thymeleaf 模板只是 HTML 与一些额外的元素属性，指导模板在渲染请求数据。&lt;/p&gt;
&lt;p&gt; &lt;em&gt;例如，如果有一个请求属性，它的键是 “message”，你希望它被Thymeleaf渲染成一个&lt;code&gt;HTML&amp;lt;p&amp;gt;&lt;/code&gt;标签，你可以在你的Thymeleaf模板中写以下内容：&lt;/em&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;p th:text=&amp;quot;${message}&amp;quot;&amp;gt;placeholder message&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thymeleaf 提供了一个内置的field.hasErrors方法，该方法根据给定字段是否存在任何错误返回一个布尔值。&lt;br&gt;
 例如要在一个信用卡号字段上显示验证错误：&lt;br&gt;
&lt;code&gt;&amp;lt;label for=&amp;quot;ccNumber&amp;quot;&amp;gt;Credit Card #: &amp;lt;/label&amp;gt;·&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; th:field=&amp;quot;*{ccNumber}&amp;quot;/&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;span class=&amp;quot;validationError&amp;quot;&lt;/code&gt; &lt;br&gt;
&lt;code&gt;th:if=&amp;quot;${#fields.hasErrors(&#39;ccNumber&#39;)}&amp;quot;&lt;/code&gt; &lt;br&gt;
&lt;code&gt;th:errors=&amp;quot;*{ccNumber}&amp;quot;&amp;gt;CC Num Error&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Spring学习之路（一）</title>
        <link>http://www.jansonblog.com/p/spring1/</link>
        <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/spring1/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/spring1/1.jpg" alt="Featured image of post Spring学习之路（一）" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt; 学习路程是按照&lt;a class=&#34;link&#34; href=&#34;https://zh.jp1lib.org/book/18238678/2d772e&#34;  title=&#34;Spring实战（第五版）&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring实战（第五版）&lt;/a&gt;进行，本系列只针对笔者自己进行内容总结，用于加深学习以及日后回顾使用。如感兴趣，推荐阅读参考图书进行学习。&lt;/p&gt;
&lt;p&gt; 书中有较多地方描述比较不清楚，实战时，存在很多问题。&lt;a class=&#34;link&#34; href=&#34;https://github.com/habuma/spring-in-action-5-samples&#34;  title=&#34;spring-in-action-5-samples&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;spring-in-action-5-samples&lt;/a&gt;对书中每一章项目进行了汇总，对照此仓库学习更容易理解。&lt;/p&gt;
&lt;h2 id=&#34;spring项目结构&#34;&gt;Spring项目结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mvnw和mvnw.cmd：这是Maven包装器（wrapper）脚本，借助脚本，即使没有安装Maven也可以构建项目&lt;/li&gt;
&lt;li&gt;pom.xml： Maven构建规范，用于引入依赖等&lt;/li&gt;
&lt;li&gt;Application.java：SpringBoot主类&lt;/li&gt;
&lt;li&gt;application.properties：初始为空，用来指定配置属性&lt;/li&gt;
&lt;li&gt;static：初始为空，用于存放静态内容（图片，样式表，JavaScript等）&lt;/li&gt;
&lt;li&gt;templates：初始为空，用于存放渲染内容到浏览器的模板文件&lt;/li&gt;
&lt;li&gt;ApplicationTests.java：简单的测试类，确保Spring应用上下文成功加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;springbootapplication组合注解&#34;&gt;@SpringBootApplication组合注解&lt;/h2&gt;
&lt;p&gt;@SpringBootApplication是一个组合注解，它组合了3个其他的注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@SpringBootConfiguration：将该类声明为配置类。尽管这个类⽬前还没有太多的配置，但是后续我们可以按需添加基于Java的Spring框架配置。这个注解实际上是@Configuration注解的特殊形式。&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration：启⽤Spring Boot的⾃动配置。我们随后会介绍⾃动配置的更多功能。就现在来说，我们只需要知道这个注解会告诉Spring Boot⾃动配置它认为我们会⽤到的组件。&lt;/li&gt;
&lt;li&gt;@ComponentScan：启⽤组件扫描。这样我们能够通过像@Component、 @Controller、@Service这样的注解声明其他类，Spring会⾃动发现它们并将它们注册为Spring应⽤上下⽂中的组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring的一些重点项目&#34;&gt;Spring的一些重点项目：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spring MVC——Spring的Web框架：可以边写控制器处理Web请求；创建REST API，生成非HTML的输出&lt;/li&gt;
&lt;li&gt;Spring Boot：starter依赖和自动配置；Actuator能洞察应用运行时的内部工作状况；灵活的环境属性规范；在核心框架的测试辅助功能之上提供了对测试的额外支持&lt;/li&gt;
&lt;li&gt;Spring Data：将应用程序数据repository定义为java接口，定义驱动存储和检索数据的方法时使用一种命名约定即可；能够处理不同类型的数据库，包括关系型数据库（JPA）、文档数据库（Mongo）、图数据库（Neo4j）等&lt;/li&gt;
&lt;li&gt;Spring Security：Spring的安全框架，解决了身份验证、授权和API安全性等安全性需求&lt;/li&gt;
&lt;li&gt;Spring Integration：解决实时集成问题，数据在可用时马上就会得到处理&lt;/li&gt;
&lt;li&gt;Spring Batch：批处理集成问题——数据收集一段时间，直到触发触发器，才进行批处理&lt;/li&gt;
&lt;li&gt;Spring Cloud：使用Spring开发云原生应用程序的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>如何使用git</title>
        <link>http://www.jansonblog.com/p/git/</link>
        <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/git/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/git/git.jpg" alt="Featured image of post 如何使用git" /&gt;&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init // 初始化仓库，生成.git目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git status // 查看仓库的状态，显示目前分支，以及有没有可疑提交的内容
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add 要添加的文件 // 向暂存区添加文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit // 执行启动编辑器，可以记述更加详细的信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &amp;#34;本次的提交注释&amp;#34;// 添加对提交的概述；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit --amend // 修改上一条提交信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log // 查看提交日志
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log --pretty=short // 显示第一行简述信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log 文件名或目录名 //显示指定文件的日志
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log -p // 查看提交带来的变动，显示文件前后差别
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log -p 文件名或目录名 //查看指定文件的变动
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reflog // 查看当前仓库执行过的操作的日志
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff // 查看当前工作树与暂存区的差别
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff HEAD // 查看与最新提交的差别，在git commit前执行这条命令是个好习惯
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;分支的操作&#34;&gt;分支的操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch // 显示分支一览表
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b 新分支名 // 创建并切换到新的分支；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/以上命令与“git branch 新分支名”，再执行“git git checkout 新分支名”效果相同/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout 分支名 // 切换到分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout - // 切换到上一个分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge // 合并分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge --no-ff A // 将分支A合并到当前分支，并启动编辑器录入合并提交的信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log --graph // 以图表形式查看分支
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;更改提交的操作&#34;&gt;更改提交的操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/使用git reflog 查看仓库日志，第一列为时间哈希值/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset // 回溯历史版本
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset --hard 目标时间点的哈希值 // 恢复到时间点的状态，
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;推送至远程仓库&#34;&gt;推送至远程仓库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 将远程仓库的名称设置为origin（标识符）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin git@github.com:用户名/git-tutorial.git 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote -v // 查看当前远程仓库
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push // 推送至远程仓库
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin master // 将当前分支内容推送给远程仓库origin的master分支；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// -u参数在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的upstream（上游）,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 运行git pull 命令，本地仓库的这个分支可以直接从origin的master分支获取内容
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;从远程仓库获取&#34;&gt;从远程仓库获取&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone // 将github仓库clone到本地，注意不要与之前操作的仓库在同一目录下
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b A origin/A //以远程仓库分支A为来源，在本地新建分支A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull // 获取最新的远程仓库分支
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;其他深入理解git的资料&#34;&gt;其他深入理解Git的资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pro Git (零基础的git学习资料)&lt;/li&gt;
&lt;li&gt;LearnGitBranching (学习git基本操作的网站)&lt;/li&gt;
&lt;li&gt;tryGit (只有英文版的网站)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>2022年7月散记</title>
        <link>http://www.jansonblog.com/p/202207/</link>
        <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/202207/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/202207/1.jpg" alt="Featured image of post 2022年7月散记" /&gt;&lt;h2 id=&#34;美景&#34;&gt;美景&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202207/1.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/1_hu36311c6336afc9cbade18762d772f23a_126992_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/1_hu36311c6336afc9cbade18762d772f23a_126992_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;周末骑车去了琵琶湖&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202207/2.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/2_huefb1fa20d6a8cff0778f4960e06101b8_262954_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/2_huefb1fa20d6a8cff0778f4960e06101b8_262954_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;大津市长雕像旁边的名言&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;研究室那些事儿&#34;&gt;研究室那些事儿&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202207/6.jpg&#34;
	width=&#34;720&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/6_huac17354754da3bc8d54e63adf3c31bc7_80925_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/6_huac17354754da3bc8d54e63adf3c31bc7_80925_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;裤子上挂伞，日本人真有你的&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;135px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202207/7.jpg&#34;
	width=&#34;960&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/7_huda6cc37f9b7a3e38878e3f6f379f0fb6_154883_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/7_huda6cc37f9b7a3e38878e3f6f379f0fb6_154883_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;教授办公室门前的仙人掌是真的长~&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;又吃啥了&#34;&gt;又吃啥了&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202207/4.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/4_hu5f6791cea12bcbae570dc80717d5d2f3_176610_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/4_hu5f6791cea12bcbae570dc80717d5d2f3_176610_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;什么梅子冷面，看着好看，但是味道很一般&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202207/5.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/5_hu0cc23d73817e62d3023817858517ebe1_172266_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/5_hu0cc23d73817e62d3023817858517ebe1_172266_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;印度人开的咖喱店，店里不开空调又热的够呛&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202207/8.jpg&#34;
	width=&#34;591&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/8_hufb2ff1af2302b52316fdd93381b4660c_54644_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/8_hufb2ff1af2302b52316fdd93381b4660c_54644_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;周董新专辑！&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202207/9.jpg&#34;
	width=&#34;591&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/9_hu7b31181b8f1b7bcb9dd7772a081818f7_71978_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/9_hu7b31181b8f1b7bcb9dd7772a081818f7_71978_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;记录一下历史，21世纪了还能有政客被枪杀&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;祝你今天愉快，你明天的愉快留着我明天再祝。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>动态规划(Dynamic programming)问题解法</title>
        <link>http://www.jansonblog.com/p/post1/</link>
        <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/post1/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/post1/PascalTriangleFibanacci.jpg" alt="Featured image of post 动态规划(Dynamic programming)问题解法" /&gt;&lt;p&gt;动态规划实现有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自下而上        (制表)&lt;/li&gt;
&lt;li&gt;自上而下        (记忆化)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自下而上&#34;&gt;自下而上&lt;/h2&gt;
&lt;p&gt;自下而上是通过 &lt;em&gt;迭代&lt;/em&gt;  实现的&lt;/p&gt;
&lt;p&gt;以&lt;strong&gt;斐波那契数列&lt;/strong&gt;为例，F(0)=0, F(1)=1。通过F(0)和F(1)计算F(2)，然后使用计算结果计算F(3)…&lt;/p&gt;
&lt;p&gt;以此类推，一直计算F(n)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 伪代码如下:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F = array of length (n + 1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F[0] = 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F[1] = 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for i from 2 to n:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    F[i] = F[i - 1] + F[i - 2]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;自上而下&#34;&gt;自上而下&lt;/h2&gt;
&lt;p&gt;自上而下通过 &lt;em&gt;递归&lt;/em&gt; 实现，并且通过 &lt;em&gt;记忆化&lt;/em&gt; 提高效率(之后解释记忆化概念)&lt;/p&gt;
&lt;p&gt;如果我们想知道斐波那契数列F(n)，需要找到F(n-1)和F(n-2)…通过递归求出F(0)和F(1)&lt;/p&gt;
&lt;p&gt;缺点也很明显，在计算中存在大量的 重复计算 ，导致效率不高&lt;/p&gt;
&lt;p&gt;而解决方法也很简单，用空间换时间，也就是 &lt;em&gt;记忆化&lt;/em&gt; ：将函数调用的结果存储在哈希图或数组中，这样当再次进行相同的函数调用时，我们可以简单地返回记忆的结果，而不是重新计算结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//伪代码如下:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;memo = hashmap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Function F(integer i):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if i is 0 or 1: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return i
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if i doesn&amp;#39;t exist in memo:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        memo[i] = F(i - 1) + F(i - 2)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return memo[i]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;所以，这两个算法哪个更好呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DP(动态规划问题)可以用任意一种方法实现&lt;/p&gt;
&lt;p&gt;每个方法都有一个突出的优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自下而上的运行速度更快    (递归效率低)&lt;/li&gt;
&lt;li&gt;自上而下的实现更简单        (因为对于递归来说，我们不用在意子问题的逻辑顺序，而对于自下而上的方法来说，我们需要解决子问题的逻辑顺序)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;比较简单而且经典的题目：&lt;a class=&#34;link&#34; href=&#34;https://leetcode.cn/problems/unique-paths/&#34;  title=&#34;《力扣 62.不同路径》&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《力扣 62.不同路径》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学习资料如下:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/explore/learn/card/dynamic-programming/630/an-introduction-to-dynamic-programming/4035/&#34;  title=&#34;Explore - LeetCode&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Explore - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>http://www.jansonblog.com/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Search</title>
        <link>http://www.jansonblog.com/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/search/</guid>
        <description></description>
        </item>
        <item>
        <title>关于我</title>
        <link>http://www.jansonblog.com/%E5%85%B3%E4%BA%8E%E6%88%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/%E5%85%B3%E4%BA%8E%E6%88%91/</guid>
        <description>&lt;h2 id=&#34;编程相关&#34;&gt;编程相关&lt;/h2&gt;
&lt;p&gt;Java，C++，Python，C，R，后端，IoT，网络模拟……&lt;/p&gt;
&lt;h2 id=&#34;兴趣爱好&#34;&gt;兴趣爱好&lt;/h2&gt;
&lt;p&gt;旅游🚲，游戏🎮，美食🍙，篮球🏀，啤酒党🍻，战争电影🎫，周杰伦🎵&lt;/p&gt;
&lt;h2 id=&#34;学历&#34;&gt;学历&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2017 ~ 2021   大连理工大学&lt;/li&gt;
&lt;li&gt;2021 ~ 2023   日本立命馆大学&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语言&#34;&gt;语言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;英语  CET-4&lt;/li&gt;
&lt;li&gt;日语  N1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于此博客&#34;&gt;关于此博客&lt;/h2&gt;
&lt;p&gt;使用hugo及Jimmy Cai大佬的&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo模板&lt;/a&gt;搭建&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;人的一切痛苦，本质上都是对自己的无能的愤怒。  ——王小波&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
