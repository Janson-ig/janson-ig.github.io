<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Janson&#39;s Blog</title>
        <link>http://www.jansonblog.com/</link>
        <description>Recent content on Janson&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 15 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://www.jansonblog.com/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Spring学习之路（二）</title>
        <link>http://www.jansonblog.com/p/spring/</link>
        <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/spring/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/spring/1.jpg" alt="Featured image of post Spring学习之路（二）" /&gt;&lt;h2 id=&#34;模板引擎&#34;&gt;模板引擎&lt;/h2&gt;
&lt;p&gt;书中总结了以下模板：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模板&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Spring Boot starter依赖&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;JavaServer Pages(JSP)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无(由Tomcat或Jetty提供)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeMarker&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-freemarker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Groovy Templates&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-groovy-templates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mustache&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-mustache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Thymeleaf&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-thymeleaf&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中，JSP不需要依赖的原因:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是因为Servlet容器本身（默认是Tomcat）会实现JSP，因此不需要额外的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用JSP问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java Servlet容器包括嵌入式的Tomcat和Jetty容器，通常会在“/WEB-INF”目录下寻找JSP。如果将应用构建成一个可执行的JAR文件，就无法满足这种需求；&lt;strong&gt;只有在将应用构建成WAR文件并部署到Servlet容器中时&lt;/strong&gt;，才能选择JSP方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模板缓存&#34;&gt;模板缓存&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，模板只有在&lt;strong&gt;第⼀次使用的时候解析⼀次&lt;/strong&gt;，解析的结果会被后续的请求所使⽤。开发期缓存存在时，想要看到变更效果，必须重新启动应用，非常不方便&lt;/li&gt;
&lt;li&gt;禁用模板缓存：将相关缓存属性设成false:在applicatin.properties中添加：
&lt;code&gt;spring.thymeleaf.cache=false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模板&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;启用缓存的属性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeMarker&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.freemarker.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Groovy Templates&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.groovy.template.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mustache&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.mustache.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Thymeleaf&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.themeleaf.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;thymeleaf模板&#34;&gt;Thymeleaf模板&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Thymeleaf 模板只是 HTML 与一些额外的元素属性，指导模板在渲染请求数据。&lt;/p&gt;
&lt;p&gt; &lt;em&gt;例如，如果有一个请求属性，它的键是 “message”，你希望它被Thymeleaf渲染成一个&lt;code&gt;HTML&amp;lt;p&amp;gt;&lt;/code&gt;标签，你可以在你的Thymeleaf模板中写以下内容：&lt;/em&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;p th:text=&amp;quot;${message}&amp;quot;&amp;gt;placeholder message&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thymeleaf 提供了一个内置的field.hasErrors方法，该方法根据给定字段是否存在任何错误返回一个布尔值。&lt;/p&gt;
&lt;p&gt; 例如要在一个信用卡号字段上显示验证错误：&lt;br&gt;
&lt;code&gt;&amp;lt;label for=&amp;quot;ccNumber&amp;quot;&amp;gt;Credit Card #: &amp;lt;/label&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; th:field=&amp;quot;*{ccNumber}&amp;quot;/&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;span class=&amp;quot;validationError&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;th:if=&amp;quot;${#fields.hasErrors(&#39;ccNumber&#39;)}&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;th:errors=&amp;quot;*{ccNumber}&amp;quot;&amp;gt;CC Num Error&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Spring学习之路（一）</title>
        <link>http://www.jansonblog.com/p/spring/</link>
        <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/spring/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/spring/1.jpg" alt="Featured image of post Spring学习之路（一）" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt; 学习路程是按照&lt;a class=&#34;link&#34; href=&#34;https://zh.jp1lib.org/book/18238678/2d772e&#34;  title=&#34;Spring实战（第五版）&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring实战（第五版）&lt;/a&gt;进行，本系列只针对笔者自己进行内容总结，用于加深学习以及日后回顾使用。如感兴趣，推荐阅读参考图书进行学习。&lt;/p&gt;
&lt;p&gt; 书中有较多地方描述比较不清楚，实战时，存在很多问题。&lt;a class=&#34;link&#34; href=&#34;https://github.com/habuma/spring-in-action-5-samples&#34;  title=&#34;spring-in-action-5-samples&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;spring-in-action-5-samples&lt;/a&gt;对书中每一章项目进行了汇总，对照此仓库学习更容易理解。&lt;/p&gt;
&lt;h2 id=&#34;spring项目结构&#34;&gt;Spring项目结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mvnw和mvnw.cmd：这是Maven包装器（wrapper）脚本，借助脚本，即使没有安装Maven也可以构建项目&lt;/li&gt;
&lt;li&gt;pom.xml： Maven构建规范，用于引入依赖等&lt;/li&gt;
&lt;li&gt;Application.java：SpringBoot主类&lt;/li&gt;
&lt;li&gt;application.properties：初始为空，用来指定配置属性&lt;/li&gt;
&lt;li&gt;static：初始为空，用于存放静态内容（图片，样式表，JavaScript等）&lt;/li&gt;
&lt;li&gt;templates：初始为空，用于存放渲染内容到浏览器的模板文件&lt;/li&gt;
&lt;li&gt;ApplicationTests.java：简单的测试类，确保Spring应用上下文成功加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;springbootapplication组合注解&#34;&gt;@SpringBootApplication组合注解&lt;/h2&gt;
&lt;p&gt;@SpringBootApplication是一个组合注解，它组合了3个其他的注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@SpringBootConfiguration：将该类声明为配置类。尽管这个类⽬前还没有太多的配置，但是后续我们可以按需添加基于Java的Spring框架配置。这个注解实际上是@Configuration注解的特殊形式。&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration：启⽤Spring Boot的⾃动配置。我们随后会介绍⾃动配置的更多功能。就现在来说，我们只需要知道这个注解会告诉Spring Boot⾃动配置它认为我们会⽤到的组件。&lt;/li&gt;
&lt;li&gt;@ComponentScan：启⽤组件扫描。这样我们能够通过像@Component、 @Controller、@Service这样的注解声明其他类，Spring会⾃动发现它们并将它们注册为Spring应⽤上下⽂中的组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring的一些重点项目&#34;&gt;Spring的一些重点项目：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spring MVC——Spring的Web框架：可以边写控制器处理Web请求；创建REST API，生成非HTML的输出&lt;/li&gt;
&lt;li&gt;Spring Boot：starter依赖和自动配置；Actuator能洞察应用运行时的内部工作状况；灵活的环境属性规范；在核心框架的测试辅助功能之上提供了对测试的额外支持&lt;/li&gt;
&lt;li&gt;Spring Data：将应用程序数据repository定义为java接口，定义驱动存储和检索数据的方法时使用一种命名约定即可；能够处理不同类型的数据库，包括关系型数据库（JPA）、文档数据库（Mongo）、图数据库（Neo4j）等&lt;/li&gt;
&lt;li&gt;Spring Security：Spring的安全框架，解决了身份验证、授权和API安全性等安全性需求&lt;/li&gt;
&lt;li&gt;Spring Integration：解决实时集成问题，数据在可用时马上就会得到处理&lt;/li&gt;
&lt;li&gt;Spring Batch：批处理集成问题——数据收集一段时间，直到触发触发器，才进行批处理&lt;/li&gt;
&lt;li&gt;Spring Cloud：使用Spring开发云原生应用程序的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>如何使用git</title>
        <link>http://www.jansonblog.com/p/git/</link>
        <pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/git/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/git/git.jpg" alt="Featured image of post 如何使用git" /&gt;&lt;h2 id=&#34;基本操作&#34;&gt;基本操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init // 初始化仓库，生成.git目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git status // 查看仓库的状态，显示目前分支，以及有没有可疑提交的内容
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add 要添加的文件 // 向暂存区添加文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit // 执行启动编辑器，可以记述更加详细的信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &amp;#34;本次的提交注释&amp;#34;// 添加对提交的概述；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit --amend // 修改上一条提交信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log // 查看提交日志
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log --pretty=short // 显示第一行简述信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log 文件名或目录名 //显示指定文件的日志
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log -p // 查看提交带来的变动，显示文件前后差别
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log -p 文件名或目录名 //查看指定文件的变动
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reflog // 查看当前仓库执行过的操作的日志
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff // 查看当前工作树与暂存区的差别
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff HEAD // 查看与最新提交的差别，在git commit前执行这条命令是个好习惯
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;分支的操作&#34;&gt;分支的操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch // 显示分支一览表
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b 新分支名 // 创建并切换到新的分支；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/以上命令与“git branch 新分支名”，再执行“git git checkout 新分支名”效果相同/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout 分支名 // 切换到分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout - // 切换到上一个分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge // 合并分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge --no-ff A // 将分支A合并到当前分支，并启动编辑器录入合并提交的信息
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log --graph // 以图表形式查看分支
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;更改提交的操作&#34;&gt;更改提交的操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/使用git reflog 查看仓库日志，第一列为时间哈希值/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset // 回溯历史版本
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset --hard 目标时间点的哈希值 // 恢复到时间点的状态，
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;推送至远程仓库&#34;&gt;推送至远程仓库&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 将远程仓库的名称设置为origin（标识符）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin git@github.com:用户名/git-tutorial.git 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote -v // 查看当前远程仓库
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push // 推送至远程仓库
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin master // 将当前分支内容推送给远程仓库origin的master分支；
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// -u参数在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的upstream（上游）,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 运行git pull 命令，本地仓库的这个分支可以直接从origin的master分支获取内容
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;从远程仓库获取&#34;&gt;从远程仓库获取&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone // 将github仓库clone到本地，注意不要与之前操作的仓库在同一目录下
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b A origin/A //以远程仓库分支A为来源，在本地新建分支A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull // 获取最新的远程仓库分支
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;其他深入理解git的资料&#34;&gt;其他深入理解Git的资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pro Git (零基础的git学习资料)&lt;/li&gt;
&lt;li&gt;LearnGitBranching (学习git基本操作的网站)&lt;/li&gt;
&lt;li&gt;tryGit (只有英文版的网站)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>2022年7月散记</title>
        <link>http://www.jansonblog.com/p/202207/</link>
        <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/202207/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/202207/1.jpg" alt="Featured image of post 2022年7月散记" /&gt;&lt;h2 id=&#34;美景&#34;&gt;美景&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202207/1.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/1_hu36311c6336afc9cbade18762d772f23a_126992_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/1_hu36311c6336afc9cbade18762d772f23a_126992_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;周末骑车去了琵琶湖&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202207/2.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/2_huefb1fa20d6a8cff0778f4960e06101b8_262954_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/2_huefb1fa20d6a8cff0778f4960e06101b8_262954_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;大津市长雕像旁边的名言&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;研究室那些事儿&#34;&gt;研究室那些事儿&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202207/6.jpg&#34;
	width=&#34;720&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/6_huac17354754da3bc8d54e63adf3c31bc7_80925_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/6_huac17354754da3bc8d54e63adf3c31bc7_80925_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;裤子上挂伞，日本人真有你的&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;135px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202207/7.jpg&#34;
	width=&#34;960&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/7_huda6cc37f9b7a3e38878e3f6f379f0fb6_154883_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/7_huda6cc37f9b7a3e38878e3f6f379f0fb6_154883_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;教授办公室门前的仙人掌是真的长~&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;又吃啥了&#34;&gt;又吃啥了&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202207/4.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/4_hu5f6791cea12bcbae570dc80717d5d2f3_176610_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/4_hu5f6791cea12bcbae570dc80717d5d2f3_176610_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;什么梅子冷面，看着好看，但是味道很一般&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202207/5.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;960&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/5_hu0cc23d73817e62d3023817858517ebe1_172266_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/5_hu0cc23d73817e62d3023817858517ebe1_172266_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;印度人开的咖喱店，店里不开空调又热的够呛&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;生活&#34;&gt;生活&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://www.jansonblog.com/p/202207/8.jpg&#34;
	width=&#34;591&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/8_hufb2ff1af2302b52316fdd93381b4660c_54644_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/8_hufb2ff1af2302b52316fdd93381b4660c_54644_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;周董新专辑！&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;  &lt;img src=&#34;http://www.jansonblog.com/p/202207/9.jpg&#34;
	width=&#34;591&#34;
	height=&#34;1280&#34;
	srcset=&#34;http://www.jansonblog.com/p/202207/9_hu7b31181b8f1b7bcb9dd7772a081818f7_71978_480x0_resize_q75_box.jpg 480w, http://www.jansonblog.com/p/202207/9_hu7b31181b8f1b7bcb9dd7772a081818f7_71978_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;记录一下历史，21世纪了还能有政客被枪杀&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;祝你今天愉快，你明天的愉快留着我明天再祝。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>动态规划(Dynamic programming)问题解法</title>
        <link>http://www.jansonblog.com/p/post1/</link>
        <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/post1/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/post1/PascalTriangleFibanacci.jpg" alt="Featured image of post 动态规划(Dynamic programming)问题解法" /&gt;&lt;p&gt;动态规划实现有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自下而上        (制表)&lt;/li&gt;
&lt;li&gt;自上而下        (记忆化)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自下而上&#34;&gt;自下而上&lt;/h2&gt;
&lt;p&gt;自下而上是通过 &lt;em&gt;迭代&lt;/em&gt;  实现的&lt;/p&gt;
&lt;p&gt;以&lt;strong&gt;斐波那契数列&lt;/strong&gt;为例，F(0)=0, F(1)=1。通过F(0)和F(1)计算F(2)，然后使用计算结果计算F(3)…&lt;/p&gt;
&lt;p&gt;以此类推，一直计算F(n)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 伪代码如下:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F = array of length (n + 1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F[0] = 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;F[1] = 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for i from 2 to n:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    F[i] = F[i - 1] + F[i - 2]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;自上而下&#34;&gt;自上而下&lt;/h2&gt;
&lt;p&gt;自上而下通过 &lt;em&gt;递归&lt;/em&gt; 实现，并且通过 &lt;em&gt;记忆化&lt;/em&gt; 提高效率(之后解释记忆化概念)&lt;/p&gt;
&lt;p&gt;如果我们想知道斐波那契数列F(n)，需要找到F(n-1)和F(n-2)…通过递归求出F(0)和F(1)&lt;/p&gt;
&lt;p&gt;缺点也很明显，在计算中存在大量的 重复计算 ，导致效率不高&lt;/p&gt;
&lt;p&gt;而解决方法也很简单，用空间换时间，也就是 &lt;em&gt;记忆化&lt;/em&gt; ：将函数调用的结果存储在哈希图或数组中，这样当再次进行相同的函数调用时，我们可以简单地返回记忆的结果，而不是重新计算结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//伪代码如下:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;memo = hashmap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Function F(integer i):
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if i is 0 or 1: 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        return i
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if i doesn&amp;#39;t exist in memo:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        memo[i] = F(i - 1) + F(i - 2)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return memo[i]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;所以，这两个算法哪个更好呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DP(动态规划问题)可以用任意一种方法实现&lt;/p&gt;
&lt;p&gt;每个方法都有一个突出的优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自下而上的运行速度更快    (递归效率低)&lt;/li&gt;
&lt;li&gt;自上而下的实现更简单        (因为对于递归来说，我们不用在意子问题的逻辑顺序，而对于自下而上的方法来说，我们需要解决子问题的逻辑顺序)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;比较简单而且经典的题目：&lt;a class=&#34;link&#34; href=&#34;https://leetcode.cn/problems/unique-paths/&#34;  title=&#34;《力扣 62.不同路径》&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《力扣 62.不同路径》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学习资料如下:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://leetcode.com/explore/learn/card/dynamic-programming/630/an-introduction-to-dynamic-programming/4035/&#34;  title=&#34;Explore - LeetCode&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Explore - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>http://www.jansonblog.com/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Search</title>
        <link>http://www.jansonblog.com/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/search/</guid>
        <description></description>
        </item>
        <item>
        <title>关于我</title>
        <link>http://www.jansonblog.com/%E5%85%B3%E4%BA%8E%E6%88%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/%E5%85%B3%E4%BA%8E%E6%88%91/</guid>
        <description>&lt;h2 id=&#34;编程相关&#34;&gt;编程相关&lt;/h2&gt;
&lt;p&gt;Java，C++，Python，C，R，后端，IoT，网络模拟……&lt;/p&gt;
&lt;h2 id=&#34;兴趣爱好&#34;&gt;兴趣爱好&lt;/h2&gt;
&lt;p&gt;旅游🚲，游戏🎮，美食🍙，篮球🏀，啤酒党🍻，战争电影🎫，周杰伦🎵&lt;/p&gt;
&lt;h2 id=&#34;学历&#34;&gt;学历&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2017 ~ 2021   大连理工大学&lt;/li&gt;
&lt;li&gt;2021 ~ 2023   日本立命馆大学&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语言&#34;&gt;语言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;英语  CET-4&lt;/li&gt;
&lt;li&gt;日语  N1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关于此博客&#34;&gt;关于此博客&lt;/h2&gt;
&lt;p&gt;使用hugo及Jimmy Cai大佬的&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo模板&lt;/a&gt;搭建&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;人的一切痛苦，本质上都是对自己的无能的愤怒。  ——王小波&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
