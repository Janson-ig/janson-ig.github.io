<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>框架 on Janson's Blog</title><link>http://www.jansonblog.com/tags/%E6%A1%86%E6%9E%B6/</link><description>Recent content in 框架 on Janson's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 16 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://www.jansonblog.com/tags/%E6%A1%86%E6%9E%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring学习之路（六）</title><link>http://www.jansonblog.com/p/spring6/</link><pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate><guid>http://www.jansonblog.com/p/spring6/</guid><description>&lt;img src="http://www.jansonblog.com/p/spring6/1.jpg" alt="Featured image of post Spring学习之路（六）" />&lt;p> &lt;/p>
&lt;h2 id="创建自己的配置属性">创建自己的配置属性
&lt;/h2>&lt;p> 这章讲的有点啰嗦，主要就讲了一个注解：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>@ConfigurationProperties&lt;/code>：&lt;br>
Spring Boot提供的支持配置属性的注入注释。放到Spring bean上后，它会为该bean中那些能够根据Spring环境注入值的属性赋值。&lt;br>
 &lt;code>@ConfigurationProperties&lt;/code>实际上通常会放到⼀种特定类型的bean中，这种bean的⽬的就是持有配置数据。这样的话，特定的配置细节就能从控制器和其他应⽤程序类中抽离出来，多个bean也能更容易地共享⼀些通⽤的配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注：Pageable是Spring Data根据页号和每页数量选取结果的子集的一种方法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="spring-profile搭建特定环境的配置">Spring profile搭建特定环境的配置
&lt;/h2>&lt;p> profile是⼀种条件化的配置，在运⾏时，根据哪些profile处于激活状态，可以使⽤或忽略不同的bean、配置类和配置属性&lt;/p>
&lt;h3 id="定义特定profile">定义特定profile
&lt;/h3>&lt;p> 定义特定profile相关的属性的⼀种⽅式就是创建另外⼀个YAML或属性⽂件，其中只包含⽤于⽣产环境的属性。&lt;br>
 ⽂件的名称要遵守如下的约定：&lt;code>application-{profile名}.yml&lt;/code>或 &lt;code>application-{profile名}.properties&lt;/code>。&lt;/p>
&lt;ol>
&lt;li>方法1&lt;br>
新建名为application-prod.yml的文件，包含以下属性：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jdbc:mysql://localhost/tacocloud&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tacouser&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tacopassword&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">level&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">WARN&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>方法2&lt;br>
将特定的profile和非特定profile的属性都放到application.yml中，二者之间使用三个中线【&amp;mdash;】进行分隔，并且使用spring.profiles属性来命名profile。application.yml如下所示：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">level&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEBUG&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">profiles&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jdbc:mysql://localhost/tacocloud&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tacouser&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tacopassword&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">level&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tacos&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">WARN&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> 该文件通过中划线(&amp;mdash;)分成两部分。第二部分制定了spring.profiles值，代表&lt;strong>后面的属性适用于prod profile&lt;/strong>。&lt;br>
 第一部分没有指定&lt;strong>spring.profiles&lt;/strong>，所以是&lt;strong>所有profiles通用&lt;/strong>的，如果当前激活的profiles没有设置这些属性，它们会作为默认值。&lt;/p>
&lt;ul>
&lt;li>解释：&lt;br>
 在上述例子，不管程序运行的时候哪个profile处于激活状态，根据&lt;strong>默认profile&lt;/strong>，包的日志级别都会设为DEBUG。&lt;br>
 但是如果名为prod的profile激活，&lt;code>logging.level.tacos&lt;/code>属性会被重写为&lt;strong>WARN&lt;/strong>。同理，如果prod profile处于激活状态，数据源相关属性会被设置为使用外部的MySQL数据库。&lt;/li>
&lt;/ul>
&lt;h3 id="激活profile三个方法">激活profile（三个方法）
&lt;/h3>&lt;ol>
&lt;li>需要将profile名称的列表赋值给&lt;code>spring.profiles.active&lt;/code>属性。例如，在&lt;code>application.yml&lt;/code>文件中：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">profiles&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">active&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">prod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> 如果这么激活，这个profile就会成为&lt;strong>默认profile&lt;/strong>。体验不到使用profile将生产环境和开发环境属性分开的好处。
2. &lt;code>% export SPRING_PROFILES_ACTIVE=prod&lt;/code>
3. 以JAR文件形式运行，可以以&lt;strong>命令行参数&lt;/strong>的形式设置要激活的profile：&lt;br>
&lt;code>% java -jar taco-cloud.jar --spring.profiles.active=prod&lt;/code>&lt;/p>
&lt;h4 id="设置多个profile两个方法">设置多个profile(两个方法)
&lt;/h4>&lt;ol>
&lt;li>YAML中：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">profiles&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">active&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">prod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">audit&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">ha&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>% export SPRING_PROFILES_ACTIVE=prod,audit,ha&lt;/code>&lt;/li>
&lt;/ol>
&lt;h4 id="如果使用cloud-foundry">如果使用Cloud Foundry
&lt;/h4>&lt;p> Spring应用部署在Cloud Foundry，会自动激活名为&lt;strong>cloud&lt;/strong>的profile，只需将生产环境相关的配置放到cloud profile下。&lt;/p>
&lt;h2 id="使用profile条件化地创建bean">使用profile条件化地创建bean
&lt;/h2>&lt;p>&lt;code>@Profile&lt;/code>注解可以将某些bean设置为仅适用于给定的profile，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Profile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dev&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CommandLineRunner&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">dataLoader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IngredientRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepo&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PasswordEncoder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">encoder&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>用法&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;code>@Profile(&amp;quot;dev&amp;quot;)&lt;/code>:在dev profile激活时创建该bean&lt;/li>
&lt;li>&lt;code>@Profile({&amp;quot;dev&amp;quot;, &amp;quot;qa&amp;quot;})&lt;/code>：dev&lt;strong>或&lt;/strong>qa profile激活的时候创建该bean&lt;/li>
&lt;li>&lt;code>@Profile(&amp;quot;!prod&amp;quot;)&lt;/code>：prod profile不激活就创建该bean&lt;/li>
&lt;li>与&lt;code>@Configuration&lt;/code>注解一起使用：&lt;br>
将 &lt;code>CommandLineRunner&lt;/code>抽取到一个名为&lt;code>DevelopmentConfig&lt;/code>的配置类中：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Profile&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s">&amp;#34;!prod&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;!qa&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Configuration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">DevelopmentConfig&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CommandLineRunner&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">dataLoader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IngredientRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepo&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PasswordEncoder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">encoder&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只有prod和qa&lt;strong>均&lt;/strong>没有激活的情况下才创建该bean。&lt;/p>
&lt;blockquote>
&lt;p>本章完。&lt;br>
如有遗漏或错误，欢迎补充纠正&lt;/p>&lt;/blockquote></description></item><item><title>Spring学习之路（五）</title><link>http://www.jansonblog.com/p/spring5/</link><pubDate>Wed, 14 Dec 2022 00:00:00 +0000</pubDate><guid>http://www.jansonblog.com/p/spring5/</guid><description>&lt;img src="http://www.jansonblog.com/p/spring5/1.jpg" alt="Featured image of post Spring学习之路（五）" />&lt;p> 第六章内容第五版与第六版几乎相同。本章介绍了自动配置bean；创建自己的配置属性；使用profile进行配置。&lt;/p>
&lt;h1 id="自动配置">自动配置：
&lt;/h1>&lt;h2 id="细粒度的自动配置">细粒度的自动配置
&lt;/h2>&lt;p>&lt;strong>两种不同但相关的配置&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Bean wiring（装配bean）：声明在Spring应⽤上下⽂中创建哪些应⽤组件以及它们应该如何相互注入。&lt;/li>
&lt;li>Property injection（依赖注入）声明在Spring应⽤上下⽂中创建哪些应⽤组件以及它们应该如何相互注入。&lt;/li>
&lt;/ol>
&lt;p> 在Spring的XML和Java配置中，这两种类型的配置通常在同一个地方&lt;strong>显式声明&lt;/strong>。&lt;br>
 在Java配置中，带@bean注解的方法很可能既实例化一个bean，又给它的属性赋值。举例来说，@Bean方法为H2数据库声明一个数据源：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DataSource&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">dataSource&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">EmbeddedDatabaseBuilder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setType&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">H2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">addScript&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;taco_schema.sql&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">addScripts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;user_data.sql&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;ingredient_data.sql&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>addScript()&lt;/code> 和 &lt;code>addScripts()&lt;/code>方法通过设置String属性来确定数据源——&lt;strong>这是不使用Spring Boot的配置方法。&lt;/strong>&lt;br>
 如果在运行时类路径中能够找到H2依赖，那么&lt;strong>Spring Boot会自动在Spring应用上下文中创建对应的DataSource bean&lt;/strong>。这个bean会运行名为&lt;code>schema.sql&lt;/code>和&lt;code>data.sql&lt;/code>的脚本。&lt;/p>
&lt;h2 id="spring的环境抽象">Spring的环境抽象
&lt;/h2>&lt;p>&lt;strong>Spring的环境抽象&lt;/strong>&lt;br>
 Spring环境会拉取多个属性源：&lt;/p>
&lt;ul>
&lt;li>JVM系统属性&lt;/li>
&lt;li>操作系统环境变量&lt;/li>
&lt;li>命令行参数&lt;/li>
&lt;li>应用属性配置文件&lt;/li>
&lt;/ul>
&lt;p> 将这些属性聚合到一个源中，通过这个源可以注入到spring的bean中。如下图所示：
&lt;img src="http://www.jansonblog.com/p/spring5/img.png"
width="1288"
height="767"
srcset="http://www.jansonblog.com/p/spring5/img_hu_6615bd9c75664688.png 480w, http://www.jansonblog.com/p/spring5/img_hu_12becad1013ac418.png 1024w"
loading="lazy"
alt="img.png"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="403px"
>
 Spring boot自动配置的bean都可以通过spring环境提取的属性进行配置.&lt;br>
例如，希望底层Servlet容器使用另一个端口监听，有以下四个不同的方法：&lt;/p>
&lt;ol>
&lt;li>“src/main/resources/application.properties”将server.port设置成一个不同的端口：server.port = 9090&lt;/li>
&lt;li>“src/main/resources/application.yml”中: server : port : 9090&lt;/li>
&lt;li>命令行参数启动时指定端口：$ java -jar tacocloud-0.0.5-SNAPSHOT.jar &amp;ndash;server.port=9090&lt;/li>
&lt;li>操作系统环境变量进行一次配置：$ export SERVER_PORT=9090（Spring能自动挑选环境变量名，将其解析）&lt;/li>
&lt;/ol>
&lt;h2 id="配置数据源">配置数据源
&lt;/h2>&lt;p>&lt;strong>显示配置自己的datasource&lt;/strong>:&lt;br>
在&lt;code>application.yml&lt;/code>配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jdbc:mysql://localhost/tacocloud&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tacodb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tacopassword&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> &lt;strong>尽管我们需要将对应的JDBC驱动添加到构建⽂件中，但是我们不需要指定JDBC驱动类。Spring Boot会根据数据库URL的结构推算出来。&lt;/strong>&lt;/p>
&lt;h3 id="设置jdbc驱动类">设置JDBC驱动类
&lt;/h3>&lt;p> 然⽽，我们依然可以通过&lt;code>spring.datasource.driver-class-name&lt;/code>属性来进⾏设置JDBC驱动类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">datasource&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">url&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jdbc:mysql://localhost/tacocloud&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tacodb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tacopassword&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">driver-class-name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">com.mysql.jdbc.Driver&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> Spring boot自动化配置DataSource bean的时候，会使用该连接。如果类路径存在&lt;code>HikariCP&lt;/code>的连接池，会使用该连接池。否则在类路径查找并使用以下连接池：&lt;/p>
&lt;ul>
&lt;li>Tomcat JDBC Connection Pool&lt;/li>
&lt;li>Apache Commons DBCP 2&lt;/li>
&lt;/ul>
&lt;p>注：旧版默认连接池是Tomcat的JDBC连接池，新版默认连接池已经变成HikariCP，因为它够快，代码量少，稳定。&lt;/p>
&lt;h2 id="配置嵌入式服务器">配置嵌入式服务器
&lt;/h2>&lt;p> 如果在配置servlet容器端口时，将端口设为0，即：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">server:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port : 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>会发生什么？&lt;br>
 虽然显式设为0，但是服务器不会在端口0上启动。而是任选一个可用的端口。这在运行自动化集成测试的时候，非常有用：因为可以保证并发运行的测试不会与硬编码的端口号冲突。&lt;/p>
&lt;h3 id="配置使其处理https请求">配置使其处理HTTPS请求
&lt;/h3>&lt;p> 底层服务器配置不仅局限于一个端口，底层容器最常见的一项设置是让它处理HTTPS请求。&lt;br>
 为了实现，需要使用JDK的keytool命令行工具生成keystore：&lt;br>
&lt;code>$ keytool -keystore mykeys.jks -genkey -alias tomcat -keyalg RSA&lt;/code>&lt;/p>
&lt;p> 接下来，为了在嵌入式服务器中启用HTTPS，需要设置属性：&lt;/p>
&lt;ol>
&lt;li>可以在命令行中设置，但是不方便&lt;/li>
&lt;li>可以通过&lt;code>application.properties&lt;/code>或&lt;code>application.yml&lt;/code>文件来声明配置：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ssl&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key-store&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">file:/ / /path/to/mykeys.jks&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key-store-password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">letmein&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key-password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">letmein&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> 解释：&lt;/p>
&lt;ol>
&lt;li>端口设为&lt;strong>8443&lt;/strong>（开发阶段HTTPS服务器的常用选择）&lt;/li>
&lt;li>&lt;code>server.ssl.key-store&lt;/code>设置为所创建的&lt;code>keystore&lt;/code>路径&lt;/li>
&lt;li>&lt;code>server.ssl.key-store-password&lt;/code>和&lt;code>server.ssl.key-password&lt;/code>属性设置为创建&lt;code>keystore&lt;/code>所设置的密码&lt;/li>
&lt;/ol>
&lt;p>属性准备就绪后，应用会监听8443端口的HTTPS请求。&lt;/p>
&lt;h2 id="配置日志">配置日志
&lt;/h2>&lt;p> 默认情况下，Spring Boot通过Logback配置日志，日志以INFO级别写入到控制台&lt;br>
 为了完全控制日志的配置，可以在类路径的根目录下&lt;code>src/main/resources&lt;/code>创建&lt;code>logback.xml&lt;/code>文件。&lt;br>
简单样例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;appender&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;STDOUT&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;encoder&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/pattern&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/encoder&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/appender&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;logger&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span> &lt;span class="na">level=&lt;/span>&lt;span class="s">&amp;#34;INFO&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;root&lt;/span> &lt;span class="na">level=&lt;/span>&lt;span class="s">&amp;#34;INFO&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;appender-ref&lt;/span> &lt;span class="na">ref=&lt;/span>&lt;span class="s">&amp;#34;STDOUT&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/root&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/configuration&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> 这个&lt;code>Logback&lt;/code>和没有&lt;code>logback.xml&lt;/code>文件时的默认行为是几乎完全相同的。但是编辑&lt;code>logback.xml&lt;/code>文件，可以完全控制应用的日志文件。&lt;/p>
&lt;p> 日志配置中最常见变更是&lt;strong>修改日志级别&lt;/strong>和&lt;strong>指定日志写入到某个文件&lt;/strong>，Spring Boot的配置属性功能如何实现？&lt;/p>
&lt;ul>
&lt;li>设置日志级别：&lt;br>
在&lt;code>application.yml&lt;/code>中添加条目，例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">level&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">root&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">WARN&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">org.springframework.security&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEBUG&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上配置将&lt;code>root logging&lt;/code>设置为&lt;strong>WARN&lt;/strong>级别，spring security的日志级别设为&lt;strong>DEBUG&lt;/strong>。&lt;/p>
&lt;ul>
&lt;li>将日志条目写入指定文件：
如要将日志条目写入到&amp;quot;&lt;code>/var/logs/&lt;/code>&amp;ldquo;中的TacoCloud文件中&lt;code>logging.path&lt;/code>和&lt;code>logging.file&lt;/code>文件可以如下配置：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">logging&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/logs/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TacoCloud.log&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">level&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">root&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">WARN&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">org&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">springframework&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">security&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">DEBUG&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> 如果应用具有指定目录的写入权限，日志条目会被写入到指定目录。&lt;br>
 默认情况下，日志文件达到&lt;strong>10MB&lt;/strong>就会轮换。&lt;/p>
&lt;h2 id="使用特定的属性值">使用特定的属性值
&lt;/h2>&lt;p> 设置属性不局限于将值设置为硬编码的String或数值，可以从其他的&lt;strong>配置属性派生值&lt;/strong>：&lt;br>
 假设我们想要设置⼀个名为&lt;code>greeting.welcome&lt;/code>的属性，它的值来源于名为&lt;code>spring.application.name&lt;/code>的另⼀个属性：
 在设置&lt;code>greeting.welcome&lt;/code>的时候，可以使用&lt;code>${}&lt;/code>占位符标记：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">greeting&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">welcome&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${spring.application.name}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> 甚至可以将&lt;code>${}&lt;/code>占位符嵌入到其他文本中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">greeting&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">welcome&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">You are using ${spring.application.name}.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> 在配置Spring⾃⼰的组件时，使⽤配置属性可以很容易地将值注⼊这些组件属性中，并且可以细粒度地调整⾃动配置功能。&lt;br>
 配置属性并不专属于Spring创建的bean。&lt;/p>
&lt;blockquote>
&lt;p>如有遗漏或错误，欢迎补充纠正&lt;/p>&lt;/blockquote></description></item><item><title>Spring学习之路（四）</title><link>http://www.jansonblog.com/p/spring4/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate><guid>http://www.jansonblog.com/p/spring4/</guid><description>&lt;img src="http://www.jansonblog.com/p/spring4/1.jpg" alt="Featured image of post Spring学习之路（四）" />&lt;p> 本文是Spring Security系列最后一篇总结。&lt;/p>
&lt;h2 id="对oauth20的支持">对OAuth2.0的支持
&lt;/h2>&lt;p>&lt;strong>OAuth2.0是什么？&lt;/strong>&lt;br>
 举个例子，就是网站中常见的第三方登录，登录某个网站支持使用Facebook，Google账号登录。微信网页授权也是基于OAuth2.0。同时1.0版本也已经被2.0完全取代了。&lt;/p>
&lt;ul>
&lt;li>Spring Security支持Fackbook,Google,GitHub,Okta第三方登录&lt;/li>
&lt;li>书中没有详细的配置教学：“ 通过OAuth2/OpenID连接客户端，你需要设置以下属性:”&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">spring:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> security:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> oauth2:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> client:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> registration:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;oauth2 or openid provider name&amp;gt;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clientId: &amp;lt;client id&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clientSecret: &amp;lt;client secret&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> scope: &amp;lt;comma-separated list of requested scopes&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> 如果要启用OAuth2.0登录，需要在&lt;em>&lt;strong>Spring Security配置类&lt;/strong>&lt;/em>中添加&lt;code>.and().oauth2Login()&lt;/code>方法。&lt;br>
 同时提供传统用户名-密码登录方式和第三方登录：&lt;code>.and().oauth2Login().loginPage(&amp;quot;/login&amp;quot;)&lt;/code>
 启用logout登出功能：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 启用logout登出:点击logout时，session被清空，同时登出
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * logoutSuccessUrl()方法：登出后，重定向到指定路径页面
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">and&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">logout&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">logoutSuccessUrl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="阻止跨站请求伪造-csrfcross-site-request-forgery">阻止跨站请求伪造 (CSRF:Cross-site request forgery)：
&lt;/h2>&lt;ul>
&lt;li>Spring Security含有&lt;strong>内置的CSRF保护&lt;/strong>，而且是&lt;strong>默认启用&lt;/strong>的，所以只需确保应用程序提交的任何表单都包含一个名为&lt;code>_csrf&lt;/code>的字段，该字段包含CSRF令牌。&lt;/li>
&lt;li>Spring Security通过将CSRF令牌放在名为&lt;code>_csrf&lt;/code>的请求属性中来简化这一点。因此，在一个&lt;strong>Thymeleaf模板&lt;/strong>中，可以用下面的代码在一个隐藏字段中呈现CSRF令牌:&lt;br>
 &lt;code>&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_csrf&amp;quot; th:value=&amp;quot;${_csrf.token}&amp;quot;/&amp;gt;&lt;/code>&lt;/li>
&lt;li>如果使用Spring MVC表单标签库（Spring MVC’s JSP tag library）或spring security安全方言，内置CSRF令牌的隐藏字段会&lt;strong>自动显示&lt;/strong>。
&lt;ul>
&lt;li>在静态模板Thymeleaf 中，只需要确保&lt;form>元素作为Thymeleaf的前缀，例如：
&lt;ul>
&lt;li>&lt;code>&amp;lt;form method=&amp;quot;POST&amp;quot; th:action=&amp;quot;@{/login}&amp;quot; id=&amp;quot;loginForm&amp;quot;&amp;gt;&lt;/code>，&lt;code>th:action&lt;/code> 在Thymeleaf会为开发者渲染隐藏字段。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>作者极其不推荐，但是还是教了这个歪门邪道：&lt;br>
 禁用内置CSRF支持：&lt;/p>
&lt;ul>
&lt;li>&lt;code>.and().csrf().disable()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="方法级安全控制">方法级安全控制
&lt;/h2>&lt;h3 id="preauthorize注解">&lt;code>@PreAuthorize&lt;/code>注解
&lt;/h3>&lt;ol>
&lt;li>
&lt;h4 id="作用">作用
&lt;/h4> &lt;code>@PreAuthorize&lt;/code>注解根据SpEL表达式进行判断，如果表达式值为&lt;code>false&lt;/code>，则不会调用方法： &lt;br>
 &lt;code>@PreAuthorize&lt;/code>如果阻止了调用，SpringSecurity抛出&lt;strong>AccessDeniedException&lt;/strong>未检查的异常，不需要进行捕捉。除非想对其进行自定义处理。如果不进行捕获:
&lt;ul>
&lt;li> 异常会被SpringSecurity的过滤器捕捉，要么显示&lt;strong>HTTP403&lt;/strong>错误；&lt;/li>
&lt;li> 要么如果用户没登录的话，被重定向到登录界面；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h4 id="用法">用法
&lt;/h4>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@PreAuthorize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hasRole(&amp;#39;ADMIN&amp;#39;)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">deleteAllOrders&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">orderRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">deleteAll&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>
&lt;h4 id="注意">&lt;strong>注意&lt;/strong>
&lt;/h4>&lt;/li>
&lt;/ol>
&lt;p> &lt;del>在以前的用法中，使用&lt;code>@EnableGlobalMethodSecurity&lt;/code>注解，并扩展&lt;code>WebSecurityConfigurerAdapter&lt;/code>类并且覆盖配置&lt;code>HttpSecurity&lt;/code>和&lt;code>WebSecurity&lt;/code>的方法；&lt;/del>&lt;br>
 &lt;strong>现在，&lt;code>WebSecurityConfigurerAdapter&lt;/code>在SpringSecurity5.7.1以上或SpringBoot2.7.0以上会出现已被弃用的警告!&lt;/strong>**
 在新的用法中，我们得分别声明类型为&lt;code>SecurityFilterChain&lt;/code>和&lt;code>WebSecurityCustomizer&lt;/code>的bean，例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SecurityFilterChain&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">filterChain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">HttpSecurityhttp&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Bean&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">WebSecurityCustomizer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">webSecurityCustomizer&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="postauthorize注解">&lt;code>@PostAuthorize&lt;/code>注解
&lt;/h3>&lt;ol>
&lt;li>
&lt;h4 id="作用-1">作用
&lt;/h4>&lt;/li>
&lt;/ol>
&lt;p> &lt;code>@PostAuthorize&lt;/code>注解的工作方式几乎与&lt;code>@PreAuthorize&lt;/code>注解相同，只是它的表达式在&lt;strong>调用目标方法并返回之前&lt;/strong>不会被计算。表达式可以根据方法的返回值来决定是否允许调用方法。&lt;br>
 抛出异常与&lt;code>@PreAuthorize&lt;/code>注解相同，为&lt;strong>AccessDeniedException&lt;/strong>未检查的异常。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;h4 id="用法-1">用法
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@PostAuthorize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hasRole(&amp;#39;ADMIN&amp;#39;) || &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;returnObject.user.username == authentication.name&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TacoOrder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="spring-security判断经过身份验证用户的方法">Spring Security判断经过身份验证用户的方法：
&lt;/h2>&lt;h3 id="方法一">方法一
&lt;/h3>&lt;ul>
&lt;li>在控制器方法中添加&lt;strong>java.security.Principal&lt;/strong>对象：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@PostMapping&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">processOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@Valid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TacoOrder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Errors&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">errors&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SessionStatus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sessionStatus&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Principal&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">principal&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">findByUsername&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">principal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="方法二">方法二
&lt;/h3>&lt;ul>
&lt;li>在控制器方法中添加&lt;strong>org.springframework.security.core.Authentication&lt;/strong>对象：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">* 调用getPrincipal()方法得到主要对象（例子为User）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">* getPrincipal()方法返回java.util.Object，所以将其转换为User
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@PostMapping&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">processOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@Valid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TacoOrder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Errors&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">errors&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SessionStatus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sessionStatus&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Authentication&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getPrincipal&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="方法三">方法三
&lt;/h3>&lt;ul>
&lt;li>注入一个带&lt;code>@AuthenticationPrincipal&lt;/code>注解的方法参数。（该注解来自Spring Security的&lt;strong>org.springframework.security.core.annotation&lt;/strong>包）：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@PostMapping&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">processOrder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@Valid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TacoOrder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Errors&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">errors&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SessionStatus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sessionStatus&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nd">@AuthenticationPrincipal&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">errors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">hasErrors&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;orderForm&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">orderRepo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">order&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">sessionStatus&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setComplete&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;redirect:/&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>优点：
&lt;ul>
&lt;li>不需要对对象进行映射&lt;/li>
&lt;li>它将特定于安全性的代码限制为注释本身&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="方法四">方法四
&lt;/h3>&lt;ul>
&lt;li>还有另一种方法可以识别经过身份验证的用户是谁，虽然有点混乱，因为它使用了大量特定于安全的代码。可以从安全上下文中获取一个身份验证对象，然后像这样请求它的主体：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Authentication&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">getAuthentication&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">authentication&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getPrincipal&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>缺点：
&lt;ul>
&lt;li>有大量安全相关的代码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>优点：
&lt;ul>
&lt;li>可以在应用程序中的任何地方使用，而不仅仅是在控制器的处理程序方法中。（这使得它适合在较低级别的代码中使用）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>本章完&lt;br>
如有遗漏或错误，欢迎补充纠正&lt;/p>&lt;/blockquote></description></item><item><title>Spring学习之路（三）</title><link>http://www.jansonblog.com/p/spring3/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>http://www.jansonblog.com/p/spring3/</guid><description>&lt;img src="http://www.jansonblog.com/p/spring3/1.jpg" alt="Featured image of post Spring学习之路（三）" />&lt;ul>
&lt;li>Spring实战第五版中使用的WebSecurityConfigurerAdapter已被弃用 （还没学过就被弃用了&amp;hellip;）&lt;/li>
&lt;li>第五章开始，使用最新的Spring实战第六版进行学习&lt;/li>
&lt;/ul>
&lt;h2 id="spring-security的密码编译器">Spring Security的密码编译器
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">密码编译器&lt;/th>
&lt;th style="text-align: center">加密方法&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">BCryptPasswordEncoder&lt;/td>
&lt;td style="text-align: center">应用 bcrypt 加强哈希加密&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">NoOpPasswordEncoder&lt;/td>
&lt;td style="text-align: center">不应用任何编码&lt;br/>（对测试有用，不适合生产使用）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Pbkdf2PasswordEncoder&lt;/td>
&lt;td style="text-align: center">应用 PBKDF2 加密&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">SCryptPasswordEncoder&lt;/td>
&lt;td style="text-align: center">应用 scrypt 哈希加密&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">StandardPasswordEncoder&lt;/td>
&lt;td style="text-align: center">应用 SHA-256 哈希加密&lt;br/>（被认为不够安全，已经被弃用）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p> 数据库中密码被加密；&lt;br>
 用户在login输入的密码使用相同的算法进行编码，在数据库使用PasswordEncoder的matches()方法进行比较。&lt;/p>
&lt;blockquote>
&lt;p> ps：关于为什么认为StandardPasswordEncoder是不安全的：&lt;br>
 目前有说法是认为SHA-256不够安全，因为SHA-256算法本身效率高，速度快，所以暴力破解门槛低。&lt;br>
而bcrypt算法可以通过参数调节计算速度，计算速度慢，所以大幅提高了暴力破解的门槛，安全性也就高了&lt;br>
（但是目前SHA-256还未被成功破解过……？&lt;/p>&lt;/blockquote>
&lt;h2 id="userdetailsservice实现">UserDetailsService实现：
&lt;/h2>&lt;p>Spring Security提供了几个开箱即用的UserDetailsService实现：&lt;/p>
&lt;ol>
&lt;li>基于内存的用户存储&lt;/li>
&lt;li>基于JDBC的用户存储&lt;/li>
&lt;li>由LDAP支持的用户存储&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">/*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="n">loadUserByUsername&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="err">方法接受用户名并使用它查找&lt;/span>&lt;span class="n">UserDetails对象&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="err">如果找不到给定用户名的用户，则抛出&lt;/span>&lt;span class="n">UsernameNotFoundException异常&lt;/span>&lt;span class="err">。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">public&lt;/span> &lt;span class="n">interface&lt;/span> &lt;span class="n">UserDetailsService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UserDetails&lt;/span> &lt;span class="n">loadUserByUsername&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">String&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">throws&lt;/span> &lt;span class="n">UsernameNotFoundException&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="securing-web-requests">Securing web requests
&lt;/h2>&lt;p> authorizeRequests()返回(ExpressionUrlAuthorizationConfigurer.ExpressionInterceptUrlRegistry)对象，允许指定URL路径和模式，以及路径对应的安全要求：&lt;br>
 书中项目的代码实现如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *保证对于/design 和 /orders路径的请求只对认证的用户有效；
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *其他路径对于所有的用户有效；
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return http
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .authorizeRequests()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .antMatchers(&amp;#34;/design&amp;#34;, &amp;#34;/orders&amp;#34;).hasRole(&amp;#34;USER&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .antMatchers(&amp;#34;/&amp;#34;, &amp;#34;/**&amp;#34;).permitAll()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .and()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .build();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p> Spring web requests的配置方法，以及如何保护路径如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">方法&lt;/th>
&lt;th style="text-align: center">作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">access(String)&lt;/td>
&lt;td style="text-align: center">如果给定的Spring Expression Language(SpEL)表达式求值为true，允许访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">anonymous()&lt;/td>
&lt;td style="text-align: center">允许匿名用户访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">authenticated()&lt;/td>
&lt;td style="text-align: center">允许通过验证的用户访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">denyAll()&lt;/td>
&lt;td style="text-align: center">无条件拒绝所有访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">fullyAuthenticated()&lt;/td>
&lt;td style="text-align: center">允许通过完全身份验证的用户访问（不推荐）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasAnyAuthority(String&amp;hellip;)&lt;/td>
&lt;td style="text-align: center">如果用户具有任何一个给定的权限，则允许访问（可代替hasAnyRole(String)方法）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasAnyRole(String…)&lt;/td>
&lt;td style="text-align: center">如果用户具有任何给定的角色，则允许访问&lt;br/> （自动加 ROLE_ 的前缀）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasAuthority(String)&lt;/td>
&lt;td style="text-align: center">如果用户具有指定的权限，则允许访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasRole(String)&lt;/td>
&lt;td style="text-align: center">如果用户具有指定的角色，则允许访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasIpAddress(String)&lt;/td>
&lt;td style="text-align: center">如果用户具有指定的IP地址，则允许访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">not()&lt;/td>
&lt;td style="text-align: center">否定任何其他认证方法的效果&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">permitAll()&lt;/td>
&lt;td style="text-align: center">无条件允许访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">rememberMe()&lt;/td>
&lt;td style="text-align: center">允许通过 remember-me 进行身份验证的用户访问&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>这其中值得注意的事，hasRole()方法可以被hasAuthority()代替：hasRole()方法自动补足 &lt;strong>ROLE_&lt;/strong> 的前缀。&lt;/li>
&lt;li>设计上来看，一个是权限，一个是角色，角色是权限的集合体。&lt;/li>
&lt;/ul>
&lt;h2 id="spring-security对于spel表达式的扩展">Spring Security对于SpEL表达式的扩展
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">Security expression&lt;/th>
&lt;th style="text-align: center">SpEL的计算结果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">authentication&lt;/td>
&lt;td style="text-align: center">用户的认证对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">denyAll&lt;/td>
&lt;td style="text-align: center">恒为false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasAnyAuthority(String&amp;hellip;authorities)&lt;/td>
&lt;td style="text-align: center">如果用户被授予所有权限中的某一个，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasAnyRole(String&amp;hellip;roles)&lt;/td>
&lt;td style="text-align: center">如果用户有给定的roles中的某一个，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasAnyAuthority(String authority)&lt;/td>
&lt;td style="text-align: center">如果用户被授予指定的权限，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasPermission(Object target, Object permission)&lt;/td>
&lt;td style="text-align: center">如果用户能以给定的权限访问指定的目标对象，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasRole(String role)&lt;/td>
&lt;td style="text-align: center">如果用户有给定的role，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">hasIpAddress(String ipAddress)&lt;/td>
&lt;td style="text-align: center">如果请求来自指定ip，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">isAnnoymous()&lt;/td>
&lt;td style="text-align: center">如果用户是匿名的，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">isAuthenticated()&lt;/td>
&lt;td style="text-align: center">如果用户已认证，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">isFullyAuthenticated()&lt;/td>
&lt;td style="text-align: center">如果用户经过完全身份验证(没有使用remember-me进行身份验证)，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">isRememberMe()&lt;/td>
&lt;td style="text-align: center">如果用户使用remeber-me进行身份验证，则为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">permitAll()&lt;/td>
&lt;td style="text-align: center">恒为true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">principal&lt;/td>
&lt;td style="text-align: center">用户的主要对象&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>remember-me（记住我）认证，就是常见的记住我：下次登录时，使用cookie导致自动登录发生。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*所以上面一节中的方法，可以用access()方法+security表达式的方式来实现；
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return http
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .authorizeRequests()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .antMatchers(&amp;#34;/design&amp;#34;, &amp;#34;/orders&amp;#34;).access(&amp;#34;hasRole(&amp;#39;USER&amp;#39;)&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .antMatchers(&amp;#34;/&amp;#34;, &amp;#34;/**&amp;#34;).access(&amp;#34;permitAll()&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .and()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .build();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>如有遗漏或错误，欢迎补充纠正&lt;/p>&lt;/blockquote></description></item><item><title>Spring学习之路（二）</title><link>http://www.jansonblog.com/p/spring2/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate><guid>http://www.jansonblog.com/p/spring2/</guid><description>&lt;img src="http://www.jansonblog.com/p/spring2/1.jpg" alt="Featured image of post Spring学习之路（二）" />&lt;h2 id="模板引擎">模板引擎
&lt;/h2>&lt;p>书中总结了以下模板：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">模板&lt;/th>
&lt;th style="text-align: center">Spring Boot starter依赖&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">JavaServer Pages(JSP)&lt;/td>
&lt;td style="text-align: center">无(由Tomcat或Jetty提供)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">FreeMarker&lt;/td>
&lt;td style="text-align: center">spring-boot-starter-freemarker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Groovy Templates&lt;/td>
&lt;td style="text-align: center">spring-boot-starter-groovy-templates&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Mustache&lt;/td>
&lt;td style="text-align: center">spring-boot-starter-mustache&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Thymeleaf&lt;/td>
&lt;td style="text-align: center">spring-boot-starter-thymeleaf&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中，JSP不需要依赖的原因:&lt;/p>
&lt;ul>
&lt;li>是因为Servlet容器本身（默认是Tomcat）会实现JSP，因此不需要额外的依赖。&lt;/li>
&lt;/ul>
&lt;p>使用JSP问题：&lt;/p>
&lt;ul>
&lt;li>Java Servlet容器包括嵌入式的Tomcat和Jetty容器，通常会在“/WEB-INF”目录下寻找JSP。如果将应用构建成一个可执行的JAR文件，就无法满足这种需求；&lt;strong>只有在将应用构建成WAR文件并部署到Servlet容器中时&lt;/strong>，才能选择JSP方案。&lt;/li>
&lt;/ul>
&lt;h2 id="模板缓存">模板缓存
&lt;/h2>&lt;ul>
&lt;li>默认情况下，模板只有在&lt;strong>第⼀次使用的时候解析⼀次&lt;/strong>，解析的结果会被后续的请求所使⽤。开发期缓存存在时，想要看到变更效果，必须重新启动应用，非常不方便&lt;/li>
&lt;li>禁用模板缓存：将相关缓存属性设成false:在application.properties中添加：
&lt;code>spring.thymeleaf.cache=false&lt;/code>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">模板&lt;/th>
&lt;th style="text-align: center">启用缓存的属性&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">FreeMarker&lt;/td>
&lt;td style="text-align: center">spring.freemarker.cache&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Groovy Templates&lt;/td>
&lt;td style="text-align: center">spring.groovy.template.cache&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Mustache&lt;/td>
&lt;td style="text-align: center">spring.mustache.cache&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">Thymeleaf&lt;/td>
&lt;td style="text-align: center">spring.thymeleaf.cache&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="thymeleaf模板">Thymeleaf模板
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>Thymeleaf 模板只是 HTML 与一些额外的元素属性，指导模板在渲染请求数据。&lt;/p>
&lt;p> &lt;em>例如，如果有一个请求属性，它的键是 “message”，你希望它被Thymeleaf渲染成一个&lt;code>HTML&amp;lt;p&amp;gt;&lt;/code>标签，你可以在你的Thymeleaf模板中写以下内容：&lt;/em>&lt;br>
&lt;code>&amp;lt;p th:text=&amp;quot;${message}&amp;quot;&amp;gt;placeholder message&amp;lt;/p&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thymeleaf 提供了一个内置的field.hasErrors方法，该方法根据给定字段是否存在任何错误返回一个布尔值。&lt;br>
 例如要在一个信用卡号字段上显示验证错误：&lt;br>
&lt;code>&amp;lt;label for=&amp;quot;ccNumber&amp;quot;&amp;gt;Credit Card #: &amp;lt;/label&amp;gt;·&lt;/code>&lt;br>
&lt;code>&amp;lt;input type=&amp;quot;text&amp;quot; th:field=&amp;quot;*{ccNumber}&amp;quot;/&amp;gt;&lt;/code>&lt;br>
&lt;code>&amp;lt;span class=&amp;quot;validationError&amp;quot;&lt;/code> &lt;br>
&lt;code>th:if=&amp;quot;${#fields.hasErrors('ccNumber')}&amp;quot;&lt;/code> &lt;br>
&lt;code>th:errors=&amp;quot;*{ccNumber}&amp;quot;&amp;gt;CC Num Error&amp;lt;/span&amp;gt;&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如有遗漏或错误，欢迎补充纠正&lt;/p>&lt;/blockquote></description></item><item><title>Spring学习之路（一）</title><link>http://www.jansonblog.com/p/spring1/</link><pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate><guid>http://www.jansonblog.com/p/spring1/</guid><description>&lt;img src="http://www.jansonblog.com/p/spring1/1.jpg" alt="Featured image of post Spring学习之路（一）" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p> 学习路程是按照&lt;a class="link" href="https://zh.jp1lib.org/book/18238678/2d772e" title="Spring实战（第五版）"
target="_blank" rel="noopener"
>Spring实战（第五版）&lt;/a>进行，本系列只针对笔者自己进行内容总结，用于加深学习以及日后回顾使用。如感兴趣，推荐阅读参考图书进行学习。&lt;/p>
&lt;p> 书中有较多地方描述比较不清楚，实战时，存在很多问题。&lt;a class="link" href="https://github.com/habuma/spring-in-action-5-samples" title="spring-in-action-5-samples"
target="_blank" rel="noopener"
>spring-in-action-5-samples&lt;/a>对书中每一章项目进行了汇总，对照此仓库学习更容易理解。&lt;/p>
&lt;h2 id="spring项目结构">Spring项目结构
&lt;/h2>&lt;ul>
&lt;li>mvnw和mvnw.cmd：这是Maven包装器（wrapper）脚本，借助脚本，即使没有安装Maven也可以构建项目&lt;/li>
&lt;li>pom.xml： Maven构建规范，用于引入依赖等&lt;/li>
&lt;li>Application.java：SpringBoot主类&lt;/li>
&lt;li>application.properties：初始为空，用来指定配置属性&lt;/li>
&lt;li>static：初始为空，用于存放静态内容（图片，样式表，JavaScript等）&lt;/li>
&lt;li>templates：初始为空，用于存放渲染内容到浏览器的模板文件&lt;/li>
&lt;li>ApplicationTests.java：简单的测试类，确保Spring应用上下文成功加载&lt;/li>
&lt;/ul>
&lt;h2 id="springbootapplication组合注解">@SpringBootApplication组合注解
&lt;/h2>&lt;p>@SpringBootApplication是一个组合注解，它组合了3个其他的注释：&lt;/p>
&lt;ul>
&lt;li>@SpringBootConfiguration：将该类声明为配置类。尽管这个类⽬前还没有太多的配置，但是后续我们可以按需添加基于Java的Spring框架配置。这个注解实际上是@Configuration注解的特殊形式。&lt;/li>
&lt;li>@EnableAutoConfiguration：启⽤Spring Boot的⾃动配置。我们随后会介绍⾃动配置的更多功能。就现在来说，我们只需要知道这个注解会告诉Spring Boot⾃动配置它认为我们会⽤到的组件。&lt;/li>
&lt;li>@ComponentScan：启⽤组件扫描。这样我们能够通过像@Component、 @Controller、@Service这样的注解声明其他类，Spring会⾃动发现它们并将它们注册为Spring应⽤上下⽂中的组件&lt;/li>
&lt;/ul>
&lt;h2 id="spring的一些重点项目">Spring的一些重点项目：
&lt;/h2>&lt;ul>
&lt;li>Spring MVC——Spring的Web框架：可以边写控制器处理Web请求；创建REST API，生成非HTML的输出&lt;/li>
&lt;li>Spring Boot：starter依赖和自动配置；Actuator能洞察应用运行时的内部工作状况；灵活的环境属性规范；在核心框架的测试辅助功能之上提供了对测试的额外支持&lt;/li>
&lt;li>Spring Data：将应用程序数据repository定义为java接口，定义驱动存储和检索数据的方法时使用一种命名约定即可；能够处理不同类型的数据库，包括关系型数据库（JPA）、文档数据库（Mongo）、图数据库（Neo4j）等&lt;/li>
&lt;li>Spring Security：Spring的安全框架，解决了身份验证、授权和API安全性等安全性需求&lt;/li>
&lt;li>Spring Integration：解决实时集成问题，数据在可用时马上就会得到处理&lt;/li>
&lt;li>Spring Batch：批处理集成问题——数据收集一段时间，直到触发触发器，才进行批处理&lt;/li>
&lt;li>Spring Cloud：使用Spring开发云原生应用程序的项目&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如有遗漏或错误，欢迎补充纠正&lt;/p>&lt;/blockquote></description></item></channel></rss>