<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Spring on Janson&#39;s Blog</title>
        <link>http://www.jansonblog.com/categories/spring/</link>
        <description>Recent content in Spring on Janson&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 15 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://www.jansonblog.com/categories/spring/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Spring学习之路（二）</title>
        <link>http://www.jansonblog.com/p/spring/</link>
        <pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/spring/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/spring/1.jpg" alt="Featured image of post Spring学习之路（二）" /&gt;&lt;h2 id=&#34;模板引擎&#34;&gt;模板引擎&lt;/h2&gt;
&lt;p&gt;书中总结了以下模板：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模板&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Spring Boot starter依赖&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;JavaServer Pages(JSP)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;无(由Tomcat或Jetty提供)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeMarker&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-freemarker&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Groovy Templates&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-groovy-templates&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mustache&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-mustache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Thymeleaf&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring-boot-starter-thymeleaf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;其中，JSP不需要依赖的原因:&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;是因为Servlet容器本身（默认是Tomcat）会实现JSP，因此不需要额外的依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用JSP问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java Servlet容器包括嵌入式的Tomcat和Jetty容器，通常会在“/WEB-INF”目录下寻找JSP。如果将应用构建成一个可执行的JAR文件，就无法满足这种需求；&lt;strong&gt;只有在将应用构建成WAR文件并部署到Servlet容器中时&lt;/strong&gt;，才能选择JSP方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模板缓存&#34;&gt;模板缓存&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下，模板只有在&lt;strong&gt;第⼀次使用的时候解析⼀次&lt;/strong&gt;，解析的结果会被后续的请求所使⽤。开发期缓存存在时，想要看到变更效果，必须重新启动应用，非常不方便&lt;/li&gt;
&lt;li&gt;禁用模板缓存：将相关缓存属性设成false:在applicatin.properties中添加：
&lt;code&gt;spring.thymeleaf.cache=false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模板&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;启用缓存的属性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FreeMarker&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.freemarker.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Groovy Templates&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.groovy.template.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mustache&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.mustache.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Thymeleaf&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;spring.themeleaf.cache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;thymeleaf模板&#34;&gt;Thymeleaf模板&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Thymeleaf 模板只是 HTML 与一些额外的元素属性，指导模板在渲染请求数据。&lt;/p&gt;
&lt;p&gt; &lt;em&gt;例如，如果有一个请求属性，它的键是 “message”，你希望它被Thymeleaf渲染成一个&lt;code&gt;HTML&amp;lt;p&amp;gt;&lt;/code&gt;标签，你可以在你的Thymeleaf模板中写以下内容：&lt;/em&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;p th:text=&amp;quot;${message}&amp;quot;&amp;gt;placeholder message&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thymeleaf 提供了一个内置的field.hasErrors方法，该方法根据给定字段是否存在任何错误返回一个布尔值。&lt;/p&gt;
&lt;p&gt; 例如要在一个信用卡号字段上显示验证错误：&lt;br&gt;
&lt;code&gt;&amp;lt;label for=&amp;quot;ccNumber&amp;quot;&amp;gt;Credit Card #: &amp;lt;/label&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot; th:field=&amp;quot;*{ccNumber}&amp;quot;/&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;span class=&amp;quot;validationError&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;th:if=&amp;quot;${#fields.hasErrors(&#39;ccNumber&#39;)}&amp;quot;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;th:errors=&amp;quot;*{ccNumber}&amp;quot;&amp;gt;CC Num Error&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Spring学习之路（一）</title>
        <link>http://www.jansonblog.com/p/spring/</link>
        <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://www.jansonblog.com/p/spring/</guid>
        <description>&lt;img src="http://www.jansonblog.com/p/spring/1.jpg" alt="Featured image of post Spring学习之路（一）" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt; 学习路程是按照&lt;a class=&#34;link&#34; href=&#34;https://zh.jp1lib.org/book/18238678/2d772e&#34;  title=&#34;Spring实战（第五版）&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring实战（第五版）&lt;/a&gt;进行，本系列只针对笔者自己进行内容总结，用于加深学习以及日后回顾使用。如感兴趣，推荐阅读参考图书进行学习。&lt;/p&gt;
&lt;p&gt; 书中有较多地方描述比较不清楚，实战时，存在很多问题。&lt;a class=&#34;link&#34; href=&#34;https://github.com/habuma/spring-in-action-5-samples&#34;  title=&#34;spring-in-action-5-samples&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;spring-in-action-5-samples&lt;/a&gt;对书中每一章项目进行了汇总，对照此仓库学习更容易理解。&lt;/p&gt;
&lt;h2 id=&#34;spring项目结构&#34;&gt;Spring项目结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mvnw和mvnw.cmd：这是Maven包装器（wrapper）脚本，借助脚本，即使没有安装Maven也可以构建项目&lt;/li&gt;
&lt;li&gt;pom.xml： Maven构建规范，用于引入依赖等&lt;/li&gt;
&lt;li&gt;Application.java：SpringBoot主类&lt;/li&gt;
&lt;li&gt;application.properties：初始为空，用来指定配置属性&lt;/li&gt;
&lt;li&gt;static：初始为空，用于存放静态内容（图片，样式表，JavaScript等）&lt;/li&gt;
&lt;li&gt;templates：初始为空，用于存放渲染内容到浏览器的模板文件&lt;/li&gt;
&lt;li&gt;ApplicationTests.java：简单的测试类，确保Spring应用上下文成功加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;springbootapplication组合注解&#34;&gt;@SpringBootApplication组合注解&lt;/h2&gt;
&lt;p&gt;@SpringBootApplication是一个组合注解，它组合了3个其他的注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@SpringBootConfiguration：将该类声明为配置类。尽管这个类⽬前还没有太多的配置，但是后续我们可以按需添加基于Java的Spring框架配置。这个注解实际上是@Configuration注解的特殊形式。&lt;/li&gt;
&lt;li&gt;@EnableAutoConfiguration：启⽤Spring Boot的⾃动配置。我们随后会介绍⾃动配置的更多功能。就现在来说，我们只需要知道这个注解会告诉Spring Boot⾃动配置它认为我们会⽤到的组件。&lt;/li&gt;
&lt;li&gt;@ComponentScan：启⽤组件扫描。这样我们能够通过像@Component、 @Controller、@Service这样的注解声明其他类，Spring会⾃动发现它们并将它们注册为Spring应⽤上下⽂中的组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring的一些重点项目&#34;&gt;Spring的一些重点项目：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Spring MVC——Spring的Web框架：可以边写控制器处理Web请求；创建REST API，生成非HTML的输出&lt;/li&gt;
&lt;li&gt;Spring Boot：starter依赖和自动配置；Actuator能洞察应用运行时的内部工作状况；灵活的环境属性规范；在核心框架的测试辅助功能之上提供了对测试的额外支持&lt;/li&gt;
&lt;li&gt;Spring Data：将应用程序数据repository定义为java接口，定义驱动存储和检索数据的方法时使用一种命名约定即可；能够处理不同类型的数据库，包括关系型数据库（JPA）、文档数据库（Mongo）、图数据库（Neo4j）等&lt;/li&gt;
&lt;li&gt;Spring Security：Spring的安全框架，解决了身份验证、授权和API安全性等安全性需求&lt;/li&gt;
&lt;li&gt;Spring Integration：解决实时集成问题，数据在可用时马上就会得到处理&lt;/li&gt;
&lt;li&gt;Spring Batch：批处理集成问题——数据收集一段时间，直到触发触发器，才进行批处理&lt;/li&gt;
&lt;li&gt;Spring Cloud：使用Spring开发云原生应用程序的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如有遗漏或错误，欢迎补充纠正&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
